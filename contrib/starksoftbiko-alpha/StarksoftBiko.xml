<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StarksoftBiko</name>
    </assembly>
    <members>
        <member name="T:Starksoft.Net.Proxy.IProxyClient">
            <summary>
            Proxy client interface.  This is the interface that all proxy clients must implement.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Proxy.IProxyClient.CreateConnection(System.String,System.Int32)">
            <summary>
            Creates a remote TCP connection through a proxy server to the destination host on the destination port.
            </summary>
            <param name="destinationHost">Destination host name or IP address.</param>
            <param name="destinationPort">Port number to connect to on the destination host.</param>
            <returns>
            Returns an open TcpClient object that can be used normally to communicate
            with the destination server
            </returns>
            <remarks>
            This method creates a connection to the proxy server and instructs the proxy server
            to make a pass through connection to the specified destination host on the specified
            port.  
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Proxy.IProxyClient.CreateConnectionAsync(System.String,System.Int32)">
            <summary>
            Asynchronously creates a remote TCP connection through a proxy server to the destination host on the destination port.
            </summary>
            <param name="destinationHost">Destination host name or IP address.</param>
            <param name="destinationPort">Port number to connect to on the destination host.</param>
            <returns>
            Returns an open TcpClient object that can be used normally to communicate
            with the destination server
            </returns>
            <remarks>
            This method creates a connection to the proxy server and instructs the proxy server
            to make a pass through connection to the specified destination host on the specified
            port.  
            </remarks>
        </member>
        <member name="E:Starksoft.Net.Proxy.IProxyClient.CreateConnectionAsyncCompleted">
            <summary>
            Event handler for CreateConnectionAsync method completed.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.IProxyClient.ProxyHost">
            <summary>
            Gets or sets proxy host name or IP address.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.IProxyClient.ProxyPort">
            <summary>
            Gets or sets proxy port number.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.IProxyClient.ProxyName">
            <summary>
            Gets String representing the name of the proxy.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.IProxyClient.TcpClient">
            <summary>
            Gets or set the TcpClient object if one was specified in the constructor.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.GetDirListDeepAsyncCompletedEventArgs">
            <summary>
            Provides data for the GetDirAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.GetDirListDeepAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,Starksoft.Net.Ftp.FtpItemCollection)">
            <summary>
             Initializes a new instance of the GetDirAsyncCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="directoryListing">A FtpItemCollection containing the directory listing.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.GetDirListDeepAsyncCompletedEventArgs.DirectoryListingResult">
            <summary>
            Directory listing collection.
            </summary>
        </member>
        <member name="T:Starksoft.Tests.TestFtpMlsx">
            <summary>
            Test fixture for Starksoft.Net.FtpClient.
            </summary>
        </member>
        <member name="M:Starksoft.Tests.TestFtpMlsx.TestMlsxItem(System.String)">
            <summary>
            Test the MSLx item class.
            </summary>
            <param name="line">MLSx line text to parse and load.</param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpMlsx.TestGetFileInfo(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,Starksoft.Net.Ftp.ListingMethod)">
            <summary>
            Test the get MLST method.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="method"></param>
        </member>
        <member name="T:Starksoft.Cryptography.OpenPGP.OutputTypes">
            <summary>
            GnuPG output itemType.
            </summary>
        </member>
        <member name="F:Starksoft.Cryptography.OpenPGP.OutputTypes.AsciiArmor">
            <summary>
            Ascii armor output.
            </summary>
        </member>
        <member name="F:Starksoft.Cryptography.OpenPGP.OutputTypes.Binary">
            <summary>
            Binary output.
            </summary>
        </member>
        <member name="T:Starksoft.Cryptography.OpenPGP.GnuPG">
            <summary>
            Interface class for GnuPG.
            </summary>
            <remarks>
            <para>
            GNU Privacy Guard from the GNU Project (also called GnuPG or GPG for short) is a highly regarded and supported opensource project that provides a complete and free implementation of the OpenPGP standard as defined by RFC2440. 
            GnuPG allows you to encrypt and sign your data and communication, manage your public and privde OpenPGP keys as well 
            as access modules for all kind of public key directories. GPG.EXE and GPG2.EXE, is a command line tool that is installed with GnuPG and contains features for easy integration with other applications. 
            </para>
            <para>
            The Starksoft OpenPGP Component for .NET provides classes that interface with the GPG.EXE command line tool.  The Starksoft OpenPGP libraries allows any .NET application to use GPG.EXE to encrypt or decypt data using
            .NET IO Streams.  No temporary files are required and everything is handled through streams.  Any .NET Stream object can be used as long as the source stream can be read and the 
            destination stream can be written to.  But, in order for the Starksoft OpenPGP Component for .NET to work you must first install the lastest version of GnuPG which includes GPG.EXE.  
            You can obtain the latest version at http://www.gnupg.org/.  See the GPG.EXE or GPG2.EXE tool documentation for information
            on how to add keys to the GPG key ring and creating your public and private keys.
            </para>
            <para>
            If you are new to GnuPG please install the application and then read how to generate new key pair or importing existing OpenPGP keys. 
            You can rad more about key generation and importing at http://www.gnupg.org/gph/en/manual.html#AEN26
            </para>
            <para>
            Encrypt File Example:
            <code>
            // create a new GnuPG object
            GnuPG gpg = new GnuPG();
            // specify a recipient that is already on the key-ring 
            gpg.Recipient = "myfriend@domain.com";
            // create an IO.Stream object to the source of the data and open it
            FileStream sourceFile = new FileStream(@"c:\temp\source.txt", FileMode.Open);
            // create an IO.Stream object to a where I want the encrypt data to go
            FileStream outputFile = new FileStream(@"c:\temp\output.txt", FileMode.Create);
            // encrypt the data using IO Streams - any type of input and output IO Stream can be used
            // as long as the source (input) stream can be read and the destination (output) stream 
            // can be written to
            gpg.Encrypt(sourceFile, outputFile);
            // close the files
            sourceFile.Close();
            outputFile.Close();
            </code>
            </para>
            <para>
            Decrypt File Example:
            <code>
            // create a new GnuPG object
            GnuPG gpg = new GnuPG();
            // create an IO.Stream object to the encrypted source of the data and open it 
            FileStream encryptedFile = new FileStream(@"c:\temp\output.txt", FileMode.Open);
            // create an IO.Stream object to a where you want the decrypted data to go
            FileStream unencryptedFile = new FileStream(@"c:\temp\unencrypted.txt", FileMode.Create);
            // specify our secret passphrase (if we have one)
            gpg.Passphrase = "secret passphrase";            
            // decrypt the data using IO Streams - any type of input and output IO Stream can be used
            // as long as the source (input) stream can be read and the destination (output) stream 
            // can be written to
            gpg.Decrypt(encryptedFile, unencryptedFile);
            // close the files
            encryptedFile.Close();
            unencryptedFile.Close();
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.#ctor">
            <summary>
            GnuPG interface class default constructor.
            </summary>
            <remarks>
            The GPG executable location is obtained by information in the windows registry.  Home path is set to the same as the
            GPG executable path.  Output itemType defaults to Ascii Armour.
            </remarks>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.#ctor(System.String,System.String)">
            <summary>
            GnuPG interface class constuctor.
            </summary>
            <remarks>Output itemType defaults to Ascii Armour.</remarks>
            <param name="homePath">The home directory where files to encrypt and decrypt are located.</param>
            <param name="binaryPath">The GnuPG executable binary directory.</param>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.#ctor(System.String)">
            <summary>
            GnuPG interface class constuctor.
            </summary>
            <param name="homePath">The home directory where files to encrypt and decrypt are located.</param>
            <remarks>
            The GPG executable location is obtained by information in the windows registry.  Output itemType defaults to Ascii Armour.
            </remarks>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.Encrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            Encrypt OpenPGP data using IO Streams.
            </summary>
            <param name="inputStream">Input stream data containing the data to encrypt.</param>
            <param name="outputStream">Output stream which will contain encrypted data.</param>
            <remarks>
            You must add the recipient's public key to your GnuPG key ring before calling this method.  Please see the GnuPG documentation for more information.
            </remarks>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.Decrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decrypt OpenPGP data using IO Streams.
            </summary>
            <param name="inputStream">Input stream containing encrypted data.</param>
            <param name="outputStream">Output stream which will contain decrypted data.</param>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.Sign(System.IO.Stream,System.IO.Stream)">
            <summary>
            Sign input stream data with default user key.
            </summary>
            <param name="inputStream">Input stream containing data to sign.</param>
            <param name="outputStream">Output stream containing signed data.</param>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.Verify(System.IO.Stream)">
            <summary>
            Verify signed input stream data with default user key.
            </summary>
            <param name="inputStream">Input stream containing signed data to verify.</param>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.GetSecretKeys">
            <summary>
            Retrieves a collection of secret keys from the GnuPG application.
            </summary>
            <returns>Collection of GnuPGKey objects.</returns>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.GetKeys">
            <summary>
            Retrieves a collection of all keys from the GnuPG application.
            </summary>
            <returns>Collection of GnuPGKey objects.</returns>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.Dispose">
            <summary>
            Dispose method for the GnuPG inteface class.
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.Dispose(System.Boolean)">
            <summary>
            Dispose method for the GnuPG interface class.
            </summary>       
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.Finalize">
            <summary>
            Destructor method for the GnuPG interface class.
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.CancelAsync">
            <summary>
            Cancels any asychronous operation that is currently active.
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.EncryptAsync(System.IO.Stream,System.IO.Stream)">
            <summary>
            Starts asynchronous execution to encrypt OpenPGP data using IO Streams.
            </summary>
            <param name="inputStream">Input stream data containing the data to encrypt.</param>
            <param name="outputStream">Output stream which will contain encrypted data.</param>
            <remarks>
            You must add the recipient's public key to your GnuPG key ring before calling this method.  Please see the GnuPG documentation for more information.
            </remarks>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.DecryptAsync(System.IO.Stream,System.IO.Stream)">
            <summary>
            Starts asynchronous execution to decrypt OpenPGP data using IO Streams.
            </summary>
            <param name="inputStream">Input stream containing encrypted data.</param>
            <param name="outputStream">Output stream which will contain decrypted data.</param>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPG.SignAsync(System.IO.Stream,System.IO.Stream)">
            <summary>
            Starts asynchronous execution to Sign OpenPGP data using IO Streams.
            </summary>
            <param name="inputStream">Input stream containing data to sign.</param>
            <param name="outputStream">Output stream which will contain Signed data.</param>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPG.Timeout">
            <summary>
            Get or set the timeout value for the GnuPG operations in milliseconds. 
            </summary>
            <remarks>
            The default timeout is 10000 milliseconds (10 seconds).
            </remarks>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPG.Recipient">
            <summary>
            Recipient name of the encrypted data.
            </summary>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPG.Passphrase">
            <summary>
            Secret passphrase text value.
            </summary>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPG.OutputType">
            <summary>
            The itemType of output that GPG should generate.
            </summary>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPG.HomePath">
            <summary>
            Path to your home directory.
            </summary>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPG.BinaryPath">
            <summary>
            Path to the location of the GPG.EXE binary executable.
            </summary>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPG.IsBusy">
            <summary>
            Gets a value indicating whether an asynchronous operation is running.
            </summary>
            <remarks>Returns true if an asynchronous operation is running; otherwise, false.
            </remarks>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPG.IsAsyncCancelled">
            <summary>
            Gets a value indicating whether an asynchronous operation is cancelled.
            </summary>
            <remarks>Returns true if an asynchronous operation is cancelled; otherwise, false.
            </remarks>
        </member>
        <member name="E:Starksoft.Cryptography.OpenPGP.GnuPG.EncryptAsyncCompleted">
            <summary>
            Event handler for EncryptAsync method completed.
            </summary>
        </member>
        <member name="E:Starksoft.Cryptography.OpenPGP.GnuPG.DecryptAsyncCompleted">
            <summary>
            Event handler for DecryptAsync completed.
            </summary>
        </member>
        <member name="E:Starksoft.Cryptography.OpenPGP.GnuPG.SignAsyncCompleted">
            <summary>
            Event handler for SignAsync completed.
            </summary>
        </member>
        <member name="T:Starksoft.Cryptography.OpenPGP.GnuPG.ActionTypes">
            <summary>
            GnuPG actions.
            </summary>
        </member>
        <member name="F:Starksoft.Cryptography.OpenPGP.GnuPG.ActionTypes.Encrypt">
            <summary>
            Encrypt data.
            </summary>
        </member>
        <member name="F:Starksoft.Cryptography.OpenPGP.GnuPG.ActionTypes.Decrypt">
            <summary>
            Decrypt data.
            </summary>
        </member>
        <member name="F:Starksoft.Cryptography.OpenPGP.GnuPG.ActionTypes.Sign">
            <summary>
            Sign data.
            </summary>
        </member>
        <member name="F:Starksoft.Cryptography.OpenPGP.GnuPG.ActionTypes.Verify">
            <summary>
            Verify signed data.
            </summary>
        </member>
        <member name="T:Starksoft.Cryptography.OpenPGP.DecryptAsyncCompletedEventArgs">
            <summary>
            Event arguments class for the DecryptAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.DecryptAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="error">Exception information generated by the event.</param>
            <param name="cancelled">Cancelled event flag.  This flag is set to true if the event was cancelled.</param>
        </member>
        <member name="T:Starksoft.Net.Http.HttpAsynchronousOperationException">
            <summary>
            This exception is thrown when an error occurs during the Http async operation.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Http.HttpException">
            <summary>
            This exception is thrown when a general Web exception occurrs.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpAsynchronousOperationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpAsynchronousOperationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpAsynchronousOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpAsynchronousOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.GetFileAsyncCompletedEventArgs">
            <summary>
            Provides data for the GetFileAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.GetFileAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
             Initializes a new instance of the GetFileAsyncCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpDataCompressionException">
            <summary>
            This exception is thrown when the FTP server is unable to enable or disable data compression.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpException">
            <summary>
            This exception is thrown when a general FTP exception occurs.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpException.LastResponse">
            <summary>
            Gets the last FTP response if one is available.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataCompressionException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataCompressionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataCompressionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataCompressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataCompressionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataCompressionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Cryptography.OpenPGP.SignAsyncCompletedEventArgs">
            <summary>
            Event arguments class for the SignAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.SignAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="error">Exception information generated by the event.</param>
            <param name="cancelled">Cancelled event flag.  This flag is set to true if the event was cancelled.</param>
        </member>
        <member name="T:Starksoft.Net.Proxy.Socks4ProxyClient">
            <summary>
            Socks4 connection proxy class.  This class implements the Socks4 standard proxy protocol.
            </summary>
            <remarks>
            This class implements the Socks4 proxy protocol standard for TCP communciations.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Proxy.Socks4ProxyClient.SOCKS_PROXY_DEFAULT_PORT">
            <summary>
            Default Socks4 proxy port.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.Socks4ProxyClient.SOCKS4_VERSION_NUMBER">
            <summary>
            Socks4 version number.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.Socks4ProxyClient.SOCKS4_CMD_CONNECT">
            <summary>
            Socks4 connection command value.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.Socks4ProxyClient.SOCKS4_CMD_BIND">
            <summary>
            Socks4 bind command value.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.Socks4ProxyClient.SOCKS4_CMD_REPLY_REQUEST_GRANTED">
            <summary>
            Socks4 reply request grant response value.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.Socks4ProxyClient.SOCKS4_CMD_REPLY_REQUEST_REJECTED_OR_FAILED">
            <summary>
            Socks4 reply request rejected or failed response value.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.Socks4ProxyClient.SOCKS4_CMD_REPLY_REQUEST_REJECTED_CANNOT_CONNECT_TO_IDENTD">
            <summary>
            Socks4 reply request rejected becauase the proxy server can not connect to the IDENTD server value.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.Socks4ProxyClient.SOCKS4_CMD_REPLY_REQUEST_REJECTED_DIFFERENT_IDENTD">
            <summary>
            Socks4 reply request rejected because of a different IDENTD server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4ProxyClient.#ctor">
            <summary>
            Create a Socks4 proxy client object.  The default proxy port 1080 is used.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4ProxyClient.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Creates a Socks4 proxy client object using the supplied TcpClient object connection.
            </summary>
            <param name="tcpClient">A TcpClient connection object.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4ProxyClient.#ctor(System.String,System.String)">
            <summary>
            Create a Socks4 proxy client object.  The default proxy port 1080 is used.
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
            <param name="proxyUserId">Proxy user identification information.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4ProxyClient.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a Socks4 proxy client object.
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
            <param name="proxyPort">Port used to connect to proxy server.</param>
            <param name="proxyUserId">Proxy user identification information.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4ProxyClient.#ctor(System.String)">
            <summary>
            Create a Socks4 proxy client object.  The default proxy port 1080 is used.
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4ProxyClient.#ctor(System.String,System.Int32)">
            <summary>
            Create a Socks4 proxy client object.
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
            <param name="proxyPort">Port used to connect to proxy server.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4ProxyClient.CreateConnection(System.String,System.Int32)">
            <summary>
            Creates a TCP connection to the destination host through the proxy server
            host.
            </summary>
            <param name="destinationHost">Destination host name or IP address of the destination server.</param>
            <param name="destinationPort">Port number to connect to on the destination server.</param>
            <returns>
            Returns an open TcpClient object that can be used normally to communicate
            with the destination server
            </returns>
            <remarks>
            This method creates a connection to the proxy server and instructs the proxy server
            to make a pass through connection to the specified destination host on the specified
            port.  
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4ProxyClient.SendCommand(System.Net.Sockets.NetworkStream,System.Byte,System.String,System.Int32,System.String)">
            <summary>
            Sends a command to the proxy server.
            </summary>
            <param name="proxy">Proxy server data stream.</param>
            <param name="command">Proxy byte command to execute.</param>
            <param name="destinationHost">Destination host name or IP address.</param>
            <param name="destinationPort">Destination port number</param>
            <param name="userId">IDENTD user ID value.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4ProxyClient.GetIPAddressBytes(System.String)">
            <summary>
            Translate the host name or IP address to a byte array.
            </summary>
            <param name="destinationHost">Host name or IP address.</param>
            <returns>Byte array representing IP address in bytes.</returns>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4ProxyClient.GetDestinationPortBytes(System.Int32)">
            <summary>
            Translate the destination port value to a byte array.
            </summary>
            <param name="value">Destination port.</param>
            <returns>Byte array representing an 16 bit port number as two bytes.</returns>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4ProxyClient.HandleProxyCommandError(System.Byte[],System.String,System.Int32)">
            <summary>
            Receive a byte array from the proxy server and determine and handle and errors that may have occurred.
            </summary>
            <param name="response">Proxy server command response as a byte array.</param>
            <param name="destinationHost">Destination host.</param>
            <param name="destinationPort">Destination port number.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4ProxyClient.CancelAsync">
            <summary>
            Cancels any asychronous operation that is currently active.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4ProxyClient.CreateConnectionAsync(System.String,System.Int32)">
            <summary>
            Asynchronously creates a remote TCP connection through a proxy server to the destination host on the destination port
            using the supplied open TcpClient object with an open connection to proxy server.
            </summary>
            <param name="destinationHost">Destination host name or IP address.</param>
            <param name="destinationPort">Port number to connect to on the destination host.</param>
            <returns>
            Returns TcpClient object that can be used normally to communicate
            with the destination server.  
            </returns>
            <remarks>
            This instructs the proxy server to make a pass through connection to the specified destination host on the specified
            port.  
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks4ProxyClient.ProxyHost">
            <summary>
            Gets or sets host name or IP address of the proxy server.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks4ProxyClient.ProxyPort">
            <summary>
            Gets or sets port used to connect to proxy server.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks4ProxyClient.ProxyName">
            <summary>
            Gets String representing the name of the proxy. 
            </summary>
            <remarks>This property will always return the value 'SOCKS4'</remarks>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks4ProxyClient.ProxyUserId">
            <summary>
            Gets or sets proxy user identification information.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks4ProxyClient.TcpClient">
            <summary>
            Gets or sets the TcpClient object. 
            This property can be set prior to executing CreateConnection to use an existing TcpClient connection.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks4ProxyClient.IsBusy">
            <summary>
            Gets a value indicating whether an asynchronous operation is running.
            </summary>
            <remarks>Returns true if an asynchronous operation is running; otherwise, false.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks4ProxyClient.IsAsyncCancelled">
            <summary>
            Gets a value indicating whether an asynchronous operation is cancelled.
            </summary>
            <remarks>Returns true if an asynchronous operation is cancelled; otherwise, false.
            </remarks>
        </member>
        <member name="E:Starksoft.Net.Proxy.Socks4ProxyClient.CreateConnectionAsyncCompleted">
            <summary>
            Event handler for CreateConnectionAsync method completed.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Proxy.HttpProxyClient">
            <summary>
            HTTP connection proxy class.  This class implements the HTTP standard proxy protocol.
            <para>
            You can use this class to set up a connection to an HTTP proxy server.  Calling the 
            CreateConnection() method initiates the proxy connection and returns a standard
            System.Net.Socks.TcpClient object that can be used as normal.  The proxy plumbing
            is all handled for you.
            </para>
            <code>
            
            </code>
            </summary>
        </member>
        <member name="M:Starksoft.Net.Proxy.HttpProxyClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Proxy.HttpProxyClient.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Creates a HTTP proxy client object using the supplied TcpClient object connection.
            </summary>
            <param name="tcpClient">A TcpClient connection object.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.HttpProxyClient.#ctor(System.String)">
            <summary>
            Constructor.  The default HTTP proxy port 8080 is used.
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.HttpProxyClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructor.  
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
            <param name="proxyPort">Port number to connect to the proxy server.</param>
            <param name="proxyUsername">Username for the proxy server.</param>
            <param name="proxyPassword">Password for the proxy server.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.HttpProxyClient.#ctor(System.String,System.Int32)">
            <summary>
            Constructor.  
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
            <param name="proxyPort">Port number for the proxy server.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.HttpProxyClient.CreateConnection(System.String,System.Int32)">
            <summary>
            Creates a remote TCP connection through a proxy server to the destination host on the destination port.
            </summary>
            <param name="destinationHost">Destination host name or IP address.</param>
            <param name="destinationPort">Port number to connect to on the destination host.</param>
            <returns>
            Returns an open TcpClient object that can be used normally to communicate
            with the destination server
            </returns>
            <remarks>
            This method creates a connection to the proxy server and instructs the proxy server
            to make a pass through connection to the specified destination host on the specified
            port.  
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Proxy.HttpProxyClient.CancelAsync">
            <summary>
            Cancels any asychronous operation that is currently active.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Proxy.HttpProxyClient.CreateConnectionAsync(System.String,System.Int32)">
            <summary>
            Asynchronously creates a remote TCP connection through a proxy server to the destination host on the destination port.
            </summary>
            <param name="destinationHost">Destination host name or IP address.</param>
            <param name="destinationPort">Port number to connect to on the destination host.</param>
            <returns>
            Returns an open TcpClient object that can be used normally to communicate
            with the destination server
            </returns>
            <remarks>
            This method creates a connection to the proxy server and instructs the proxy server
            to make a pass through connection to the specified destination host on the specified
            port.  
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Proxy.HttpProxyClient.ProxyHost">
            <summary>
            Gets or sets host name or IP address of the proxy server.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.HttpProxyClient.ProxyPort">
            <summary>
            Gets or sets port number for the proxy server.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.HttpProxyClient.ProxyName">
            <summary>
            Gets String representing the name of the proxy. 
            </summary>
            <remarks>This property will always return the value 'HTTP'</remarks>
        </member>
        <member name="P:Starksoft.Net.Proxy.HttpProxyClient.TcpClient">
            <summary>
            Gets or sets the TcpClient object. 
            This property can be set prior to executing CreateConnection to use an existing TcpClient connection.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.HttpProxyClient.IsBusy">
            <summary>
            Gets a value indicating whether an asynchronous operation is running.
            </summary>
            <remarks>Returns true if an asynchronous operation is running; otherwise, false.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Proxy.HttpProxyClient.IsAsyncCancelled">
            <summary>
            Gets a value indicating whether an asynchronous operation is cancelled.
            </summary>
            <remarks>Returns true if an asynchronous operation is cancelled; otherwise, false.
            </remarks>
        </member>
        <member name="E:Starksoft.Net.Proxy.HttpProxyClient.CreateConnectionAsyncCompleted">
            <summary>
            Event handler for CreateConnectionAsync method completed.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Http.TransferCompleteEventArgs">
            <summary>
            Event arguments to facilitate the transfer complete event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.TransferCompleteEventArgs.#ctor(System.Int64,System.Int32,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
            <param name="bytesTransferred">The total number of bytes transferred.</param>
            <param name="bytesPerSecond">The data transfer speed in bytes per second.</param>
            <param name="elapsedTime">The time that has elapsed since the data transfer started.</param>
        </member>
        <member name="P:Starksoft.Net.Http.TransferCompleteEventArgs.BytesTransferred">
            <summary>
            The total number of bytes transferred.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.TransferCompleteEventArgs.BytesPerSecond">
            <summary>
            Gets the data transfer speed in bytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.TransferCompleteEventArgs.KilobytesPerSecond">
            <summary>
            Gets the data transfer speed in kilobytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.TransferCompleteEventArgs.ElapsedTime">
            <summary>
            Gets the time that has elapsed since the data transfer started.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Http.HttpConnectionClosedException">
            <summary>
            This exception is thrown when an error occurs during the Http connection is closed while attempting to transmit data.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpConnectionClosedException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpConnectionClosedException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpConnectionClosedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpConnectionClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpMlsxItemParser">
            <summary>
            Generic ftp file and directory MLSx listing parser that supports most Unix, Dos, and Windows style FTP 
            directory listings.  A custom parser can be created using the IFtpItemParser interface in the event
            this parser does not suit the needs of a specific FTP server directory format listing.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.IFtpItemParser">
             <summary>
             <para>
             This interface is used to create a pluggable, custom ftp item parser.  The FtpClient object has a property named
             ItemParser which is used to override the default item parser behavior.  You might need to create a custom parser for
             exotic FTP servers which the FtpClient object does not support.  There is no standard supported in the RFC 959 standard
             as to what format an FTP server must give for directory and file listings.  Although newer FTP protocol standards so
             support a structured directory listing with detailed information, this new format is not widely supported amoung FTP 
             server vendors and there is no hope for support for legacy FTP servers.  
             </para>
             <para>
             The FtpClient object can handle the most common formats without issue but for some older or more exotic FTP servers you may 
             such as an MVS legacy system may use a very different format than the common Unix and DOS style format. 
             In this situation, it makes the most sense to create your own ftp item parser to parse the unique directory and file listing.
             </para>
             </summary>
             <remarks>
             <para>
             When creating a custom ftp item parser for a specific FTP server you must create a new object and implment the ParseLine method.
             Each line of directory listing data that is transmitted from the FTP server will result in the PareLine method being called.  You must
             parse the line of data and return a FtpItem object so that the item is added to the FtpItemList collection within the FtpClient object.
             </para>
             <para>
             Below is an example of a custom FtpItem parser that handles both DOS and OS/2 style FTP server listings.  Note that not all the information
             such as file permissions can be obtained from the FTP server.  
             </para>
             </remarks>
             <example>
             <code>
            using System;
            using System.Text.RegularExpressions; 
            
            public class CustomFtpItemParser : IFtpItemParser  
            {
                public FtpItem ParseLine(string line)
                {
                    //  date portion
                    Regex rdate = new System.Text.RegularExpressions.Regex(@"(\d\d-\d\d-\d\d)");
                    string date = rdate.Match(line).ToString();
            
                    // time portion
                    Regex rtime = new System.Text.RegularExpressions.Regex(@"(\d\d:\d\d\s*(AM|PM))|(\d\d:\d\d)", RegexOptions.IgnoreCase);
                    string time = rtime.Match(line).ToString();
            
                    // file size portion
                    Regex rsize = new System.Text.RegularExpressions.Regex(@"((?&lt;=(\d\d:\d\d\s*(AM|PM)\s*))\d+)|(\d+(?=\s+\d\d-\d\d-\d\d\s+))", RegexOptions.IgnoreCase);
                    string size = rsize.Match(line).ToString();
            
                    // directory
                    Regex rdir = new System.Text.RegularExpressions.Regex(@"&lt;DIR&gt;|\sDIR\s", RegexOptions.IgnoreCase);
                    string dir = rdir.Match(line).ToString();
            
                    // name
                    Regex rname = new System.Text.RegularExpressions.Regex(@"((?&lt;=&lt;DIR&gt;\s+).+)|((?&lt;=\d\d:\d\d\s+).+)|((?&lt;=(\d\d:\d\d(AM|PM)\s+\d+\s+)).+)", RegexOptions.IgnoreCase);
                    string name = rname.Match(line).ToString();
            
                    // put togther the date/time
                    DateTime dateTime = DateTime.MinValue;
                    DateTime.TryParse(String.Format("{0} {1}", date, time), out dateTime);
            
                    // parse the file size
                    long sizeLng = 0;
                    Int64.TryParse(size, out sizeLng);           
            
                    // determine the file item itemType
                    FtpItemType itemTypeObj;
                    if (dir.Length &gt; 0)
                        itemTypeObj = FtpItemType.Directory;
                    else
                        itemTypeObj = FtpItemType.File;
            
                    return new FtpItem(name, dateTime, sizeLng, "", "", itemTypeObj, line);
                }
            }       
             </code>
            
             <code>
             // create a FtpClient object to some local windows ftp server in your organization
             FtpClient ftp = new FtpClient("192.168.1.1");
            
             // use the custom ftp item parser
             ftp.ItemParser = new CustomFtpItemParser();
            
             // open a connect to the rserver
             ftp.Open("ftp", "user@mail.com");
             FtpItemList list = ftp.GetDirList("/");
            
             // list all the items to the debug output window
             foreach (FtpItem item in list)
             {
                 System.Diagnostics.Debug.WriteLine(item.Name + " " + item.Modified.ToString() + " " + item.Size.ToString() + " " 
                     + item.SymbolicLink + " " + item.Type.ToString() + " " + item.Permissions + " ---- " + item.RawText);   
             }
             
             ftp.Close();
             </code>
             </example>
        </member>
        <member name="M:Starksoft.Net.Ftp.IFtpItemParser.ParseLine(System.String)">
            <summary>
            The ParseLine method is called by the FtpClient for each line of directory listing data transmitted by the FTP server to the FTP client.
            </summary>
            <param name="line">A single line of data for a specific directory for file listing.</param>
            <returns>A new FtpItem object.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpMlsxItemParser.ParseLine(System.String)">
            <summary>
            Method to parse a line of file listing data from the FTP server.
            </summary>
            <param name="line">Line to parse.</param>
            <returns>Object representing data in parsed file listing line.</returns>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpFeatureCollection">
            <summary>
            Ftp response collection.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.#ctor">
            <summary>
            Default constructor for no features.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.#ctor(System.String)">
            <summary>
            Default constructor with features.
            </summary>
            <param name="text">Raw feature list text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.IndexOf(Starksoft.Net.Ftp.FtpFeature)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire FtpFeatureCollection list.
            </summary>
            <param name="item">The FtpFeature object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire if found; otherwise, -1.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.Add(Starksoft.Net.Ftp.FtpFeature)">
            <summary>
            Adds an FtpFeature to the end of the FtpFeatureCollection list.
            </summary>
            <param name="item">FtpFeature object to add.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.Clear">
            <summary>
            Remove all elements from the FtpFeatureCollection list.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.GetRawText">
            <summary>
            Get the raw FTP server supplied reponse text for features.
            </summary>
            <returns>A string containing the FTP feature list.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.Find(System.String)">
            <summary>
            Linearly searches for the specified object based on the feature 'name' parameter value
            and returns the corresponding object with the name is found; otherwise null.  Search is case insensitive.
            </summary>
            <remarks>
            example:  col.Find("UTF8");
            </remarks>
            <param name="name">The name of the FtpFeature to locate in the collection.</param>
            <returns>FtpFeature object if the name if found; otherwise null.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.Find(Starksoft.Net.Ftp.FtpCmd)">
            <summary>
            Linearly searches for the specified object based on the feature 'name' parameter value
            and returns the corresponding object with the name is found; otherwise null.  Search is case insensitive.
            </summary>
            <param name="name">The name of the FtpFeature to locate in the collection.</param>
            <returns>FtpFeature object if the name if found; otherwise null.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.Contains(System.String)">
            <summary>
            Linearly searches for the specified object based on the feature 'name' parameter value
            and returns true if an object with the name is found; otherwise false.  Search is case insensitive.
            </summary>
            <remarks>
            example:  col.Contains("UTF8");
            </remarks>
            <param name="name">The name of the FtpFeature to locate in the collection.</param>
            <returns>True if the name if found; otherwise false.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.Contains(System.String,System.String)">
            <summary>
            Linearly searches for the specified object based on the feature 'name' and 'argument' parameter values
            and returns true if an object with the name is found; otherwise false.  Search is case insensitive.
            </summary>
            <remarks>
            examples:  col.Contains("REST", "STREAM");
                       col.Contains(FtpCmd.Hash, "SHA-1");
            </remarks>
            <param name="name">The name of the FtpFeature to locate in the collection.</param>
            <param name="argument">The argument for the FtpFeature to locate in the collection.</param>
            <returns>True if the name if found; otherwise false.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.Contains(Starksoft.Net.Ftp.FtpCmd)">
            <summary>
            Linearly searches for the specified object based on the feature 'name' parameter value
            and returns true if an object with the name is found; otherwise false.  Search is case insensitive.
            </summary>
            <param name="name">The name of the FtpFeature to locate in the collection.</param>
            <returns>True if the name if found; otherwise false.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.Contains(Starksoft.Net.Ftp.FtpCmd,System.String)">
            <summary>
            Linearly searches for the specified object based on the feature 'name' parameter value
            and returns true if an object with the name is found; otherwise false.  Search is case insensitive.
            </summary>
            <param name="name">The name of the FtpFeature to locate in the collection.</param>
            <param name="arguments">The argument for the FtpFeature to locate in the collection.</param>
            <returns>True if the name if found; otherwise false.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.Parse">
            <summary>
            Parses the raw features text into objects and loads them into the collection.
            </summary>
            <remarks>
            http://tools.ietf.org/html/rfc2389#section-3
            
            Note that each feature line in the feature-listing begins with a
            single space.  That space is not optional, nor does it indicate
            general white space.  This space guarantees that the feature line can
            never be misinterpreted as the end of the feature-listing, but is
            required even where there is no possibility of ambiguity.
            
            Syntax:
            feat-response   = error-response / no-features / feature-listing
                    no-features     = "211" SP *TCHAR CRLF
                    feature-listing = "211-" *TCHAR CRLF
                                      1*( SP feature CRLF )
                                      "211 End" CRLF
                    feature         = feature-label [ SP feature-parms ]
                    feature-label   = 1*VCHAR
                    feature-parms   = 1*TCHAR
                    
            Example:
                    C> FEAT
                    S> 211-Extensions supported:
                    S>  MLST size*;create;modify*;perm;media-type
                    S>  SIZE
                    S>  COMPRESSION
                    S>  MDTM
                    S> 211 END
            
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureCollection.SplitFeature(System.String)">
            <summary>
            Split the feature line by extracting the feature command from the optional arguments.
            </summary>
            <param name="fl">Feature line to parse.</param>
            <returns>Array of two string elements.  The first element contains the command and the second the optional arguments.</returns>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpFeatureCollection.Count">
            <summary>
             Gets the number of elements actually contained in the FtpFeatureCollection list.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpFeatureCollection.Item(System.Int32)">
            <summary>
            Gets an FtpFeature from the FtpFeatureCollection list based on index value.
            </summary>
            <param name="index">Numeric index of item to retrieve.</param>
            <returns>FtpFeature object.</returns>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpFeatureCollection.Item(System.String)">
            <summary>
            Gets an FtpFeature from the FtpFeatureCollection list based on name.
            </summary>
            <param name="name">Name of the feature.</param>
            <returns>FtpFeature object.</returns>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpFeatureCollection.Item(Starksoft.Net.Ftp.FtpCmd)">
            <summary>
            Gets an FtpFeature from the FtpFeatureCollection list based on name.
            </summary>
            <param name="name">Name of the feature.</param>
            <returns>FtpFeature object.</returns>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpFeatureArgumentCollection">
            <summary>
            Ftp response collection.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureArgumentCollection.#ctor">
            <summary>
            Default constructor for no feature arguments.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureArgumentCollection.#ctor(System.String)">
            <summary>
            Default constructor with features.
            </summary>
            <param name="text">Raw feature list text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureArgumentCollection.IndexOf(Starksoft.Net.Ftp.FtpFeatureArgument)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire FtpFeatureArgumentCollection list.
            </summary>
            <param name="item">The FtpFeatureArgument object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire if found; otherwise, -1.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureArgumentCollection.Add(Starksoft.Net.Ftp.FtpFeatureArgument)">
            <summary>
            Adds an FtpFeatureArgument to the end of the FtpFeatureArgumentCollection list.
            </summary>
            <param name="item">FtpFeatureArgument object to add.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureArgumentCollection.Clear">
            <summary>
            Remove all elements from the FtpFeatureArgumentCollection list.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureArgumentCollection.GetRawText">
            <summary>
            Get the raw FTP server supplied reponse text for features.
            </summary>
            <returns>A string containing the FTP feature list.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureArgumentCollection.Find(System.String)">
            <summary>
            Linearly searches for the specified object based on the feature 'name' parameter value
            and returns the corresponding object with the name is found; otherwise null.  Search is case insensitive.
            </summary>
            <param name="name">The name of the FtpFeatureArgument to locate in the collection.</param>
            <returns>FtpFeatureArgument object if the name if found; otherwise null.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureArgumentCollection.Contains(System.String)">
            <summary>
            Linearly searches for the specified object based on the feature 'name' parameter value
            and returns true if an object with the name is found; otherwise false.  Search is case insensitive.
            </summary>
            <remarks>
            example:  col.Contains("UTF8");
            </remarks>
            <param name="name">The name of the FtpFeatureArgument to locate in the collection.</param>
            <returns>True if the name if found; otherwise false.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureArgumentCollection.GetArgumentArray">
            <summary>
            Gets the FTP feature arguments as a string array.
            </summary>
            <returns>Array of strings containing arguments; otherwise null.</returns>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpFeatureArgumentCollection.Count">
            <summary>
             Gets the number of elements actually contained in the FtpFeatureArgumentCollection list.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpFeatureArgumentCollection.Item(System.Int32)">
            <summary>
            Gets an FtpFeatureArgument from the FtpFeatureArgumentCollection list based on index value.
            </summary>
            <param name="index">Numeric index of item to retrieve.</param>
            <returns>FtpFeatureArgument object.</returns>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpFeatureArgumentCollection.Item(System.String)">
            <summary>
            Gets an FtpFeature from the FtpFeatureCollection list based on name.
            </summary>
            <param name="name">Name of the feature.</param>
            <returns>FtpFeature object.</returns>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpCmd">
            <summary>
            FTP server commands.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Unknown">
            <summary>
            Unknown command issued.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.User">
            <summary>
            The USER command.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Pass">
            <summary>
            The PASS command.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Mkd">
            <summary>
            The MKD command.  Make new directory.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Rmd">
            <summary>
            The RMD command.  Remove directory.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Retr">
            <summary>
            The RETR command.  Retrieve file.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Pwd">
            <summary>
            The PWD command.  Print working directory.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Syst">
            <summary>
            The SYST command.  System status.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Cdup">
            <summary>
            The CDUP command.  Change directory up.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Dele">
            <summary>
            The DELE command.  Delete file or directory.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Type">
            <summary>
            The TYPE command.  Transfer type.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Cwd">
            <summary>
            The CWD command.  Change working directory.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Port">
            <summary>
            The PORT command.  Data port.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Pasv">
            <summary>
            The PASV command.  Passive port.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Stor">
            <summary>
            The STOR command.  Store file.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Stou">
            <summary>
            The STOU command.  Store file unique.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Appe">
            <summary>
            The APPE command.  Append file.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Rnfr">
            <summary>
            The RNFR command.  Rename file from.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Rnto">
            <summary>
            The RFTO command.  Rename file to.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Abor">
            <summary>
            The ABOR command.  Abort current operation.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.List">
            <summary>
            The LIST command.  List files.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Nlst">
            <summary>
            The NLST command.  Namelist files.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Site">
            <summary>
            The SITE command.  Site.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Stat">
            <summary>
            The STAT command.  Status.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Noop">
            <summary> 
            The NOOP command.  No operation.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Help">
            <summary>
            The HELP command.  Help.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Allo">
            <summary>
            The ALLO command.  Allocate space.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Quit">
            <summary>
            The QUIT command.  Quite session.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Rest">
            <summary>
            The REST command.  Restart transfer.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Auth">
            <summary>
            The AUTH command.  Initialize authentication.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Pbsz">
            <summary>
            The PBSZ command.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Prot">
            <summary>
            The PROT command.  Security protocol.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Mode">
            <summary>
            The MODE command.  Data transfer mode.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Mdtm">
            <summary>
            The MDTM command.  Month Day Time command.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Size">
            <summary>
            The SIZE command.  File size.
            </summary>
            <remarks>
            This command retrieves the size of the file as stored on the FTP server.  Not all FTP servers
            support this command.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Feat">
            <summary>
            The FEAT command.  Supported features.
            </summary>
            <remarks>
            This command gets a list of supported features from the FTP server.  The feature list may contain
            extended commands in addition to proprietrary commands that are not defined in RFC documents.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Xcrc">
            <summary>
            The XCRC command.  CRC file accuracy testing.
            </summary>
            <remarks>
            This is a non-standard command not supported by all FTP servers and not defined in RFC documents.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Xmd5">
            <summary>
            The XMD5 command.  MD5 file integrity hashing.
            </summary>
            <remarks>
            This is a non-standard command not supported by all FTP servers and not defined in RFC documents.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Xsha1">
            <summary>
            The XSHA1 command.  SHA1 file integerity hashing.
            </summary>
            <remarks>
            This is a non-standard command not supported by all FTP servers and not defined in RFC documents.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Xsha256">
            <summary>
            The XSHA256 command.  SHA-256 file integerity hashing.
            </summary>
            <remarks>
            This is a non-standard command not supported by all FTP servers and not defined in RFC documents.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Xsha512">
            <summary>
            The XSHA512 command.  SHA-512 file integerity hashing.
            </summary>
            <remarks>
            This is a non-standard command not supported by all FTP servers and not defined in RFC documents.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Epsv">
            <summary>
            The EPSV command.  Extended passive command.
            </summary>
            <remarks>
            The EPSV command is an extended PASV command that supports both IPv4 and IPv6 network addressing and is defined
            in the RFC 2428 document.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Eprt">
            <summary>
            The EPRT command.  Extended port command.
            </summary>
            <remarks>
            The EPRT command is an extended PORT command that supports both IPv4 and IPv6 network addressing and is defined
            in the RFC 2428 document.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Mfmt">
            <summary>
            The MFMT command. Modify File Modification Time command.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Mfct">
            <summary>
            The MFCT command. Modify File Creation Time command.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Opts">
            <summary>
            The OPTS command.  This command allows an FTP client to define a parameter that will be used by a subsequent command. 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Hash">
            <summary>
            The HASH command.  This command is not supported by all FTP servers.
            </summary>
            <remarks>
            This command is in the RFC draft phase and is used to generate file hashes on FTP server.  
            More information can be found searching the document named
            "File Transfer Protocol HASH Command for Cryptographic Hashes" draft-ietf-ftpext2-hash-03.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Rang">
            <summary>
            The RANG command.  This command is not supported by all FTP servers.
            </summary>
            <remarks>
            This command is in the RFC draft phase and is used specify a byte range for partical file hashes.  
            More information can be found searching the document named
            "File Transfer Protocol HASH Command for Cryptographic Hashes" draft-ietf-ftpext2-hash-03.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Clnt">
            <summary>
            The CLNT command.  This command is not supported by all FTP servers.
            </summary>
            <remarks>
            The CLieNT command is a command whereby the FTP client can identify itself to the FTP server.
            Many FTP servers ignore this command.  The ServU FTP server requires this command to be sent
            prior to other important commands. 
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Mlst">
            <summary>
            The MLST command.  This command is not supported by all FTP servers.
            </summary>
            <remarks>
            The MLST and MLSD commands are intended to standardize the file and
            directory information returned by the server-FTP process.  These
            commands differ from the LIST command in that the format of the
            replies is strictly defined although extensible.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpCmd.Mlsd">
            <summary>
            The MLSD command.  This command is not supported by all FTP servers.
            </summary>
            <remarks>
            The MLST and MLSD commands are intended to standardize the file and
            directory information returned by the server-FTP process.  These
            commands differ from the LIST command in that the format of the
            replies is strictly defined although extensible.
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpRequest">
            <summary>
            FTP request object which contains the command, arguments and text or an FTP request.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpRequest.#ctor(System.Text.Encoding,Starksoft.Net.Ftp.FtpCmd,System.String[])">
            <summary>
            FTP request constructor.
            </summary>
            <param name="encoding">Text encoding object to use.</param>
            <param name="command">FTP request command.</param>
            <param name="arguments">Parameters for the request</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpRequest.#ctor(System.Text.Encoding,Starksoft.Net.Ftp.FtpCmd)">
            <summary>
            FTP request constructor.
            </summary>
            <param name="encoding">Text encoding object to use.</param>
            <param name="command">FTP request command.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpRequest.Command">
            <summary>
            Get the FTP command enumeration value.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpRequest.Arguments">
            <summary>
            Get the FTP command arguments (if any).
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpRequest.Text">
            <summary>
            Get the FTP command text with any arguments.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpRequest.IsFileTransfer">
            <summary>
            Gets a boolean value indicating if the command is a file transfer or not.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Http.HttpResponseEventArgs">
            <summary>
            Event arguments to facilitate the response event from the Http server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpResponseEventArgs.#ctor(Starksoft.Net.Http.HttpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="response">HttpResponse object.</param>
        </member>
        <member name="P:Starksoft.Net.Http.HttpResponseEventArgs.Response">
            <summary>
            Response object containing response received from the server.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Http.ConnectionClosedEventArgs">
            <summary>
            Event arguments to facilitate the response event from the Http server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.ConnectionClosedEventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpUtilities">
            <summary>
            FTP utility methods.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpUtilities.ModeToAttribute(System.Int32)">
            <summary>
            Converts the UNIX 3 digit mode value to UNIX attribute string.
            </summary>
            <param name="mode">Three digit mode value.</param>
            <returns>Attribute string.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpUtilities.AttributeToMode(System.String)">
            <summary>
            Convert UNIX attribute to UNIX three digit mode value.
            </summary>
            <param name="s">Attribute string.</param>
            <returns>Three digit mode integer value.</returns>
        </member>
        <member name="T:Starksoft.Net.Ftp.ValidateServerCertificateEventArgs">
            <summary>
            Event arguments to facilitate the FtpClient transfer progress and complete events.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.ValidateServerCertificateEventArgs.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            ValidateServerCertificateEventArgs constructor.
            </summary>
            <param name="certificate">X.509 certificate object.</param>
            <param name="chain">X.509 certificate chain.</param>
            <param name="policyErrors">SSL policy errors.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.ValidateServerCertificateEventArgs.Certificate">
            <summary>
            The X.509 version 3 server certificate.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.ValidateServerCertificateEventArgs.Chain">
            <summary>
            Server chain building engine for server certificate.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.ValidateServerCertificateEventArgs.PolicyErrors">
            <summary>
            Enumeration representing SSL (Secure Socket Layer) errors.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.ValidateServerCertificateEventArgs.IsCertificateValid">
            <summary>
            Boolean value indicating if the server certificate is valid and can
            be accepted by the FtpClient object.
            </summary>
            <remarks>
            Default value is false which results in certificate being rejected and the SSL
            connection abandoned.  Set this value to true to accept the server certificate 
            otherwise the SSL connection will be closed.
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException">
            <summary>
            This exception is thrown when the server fails to respond to an FTP command in a timely manner.
            The waiting time can be adjusted by specifing a different value for the CommandTimeout property.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandResponseTimeoutException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpCertificateValidationException">
            <summary>
            This exception is thrown when an X.509 certificate fails validation when establishing a secure command or data connection
            to the FTP server.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpSecureConnectionException">
            <summary>
            This exception is thrown when an error occurs with a secure command or data connection to the FTP server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpSecureConnectionException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpSecureConnectionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpSecureConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpSecureConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpSecureConnectionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpSecureConnectionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCertificateValidationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCertificateValidationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCertificateValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCertificateValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCertificateValidationException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCertificateValidationException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.TransferType">
            <summary>
            Enumeration representing type of file transfer mode.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferType.None">
            <summary>
            No transfer type.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferType.Ascii">
            <summary>
            Transfer mode of type 'A' (ascii).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferType.Binary">
            <summary>
            Transfer mode of type 'I' (image or binary)
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferType.Unknown">
            <summary>
            Unknown transfer mode.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FileAction">
            <summary>
            Enumeration representing the three types of actions that FTP supports when
            uploading or 'putting' a file on an FTP server from the FTP client.  
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FileAction.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FileAction.Create">
            <summary>
            Create a new file or overwrite an existing file.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FileAction.CreateNew">
            <summary>
            Create a new file.  Do not overwrite an existing file.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FileAction.CreateOrAppend">
            <summary>
            Create a new file or append an existing file.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FileAction.Resume">
            <summary>
            Resume a file transfer.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FileAction.ResumeOrCreate">
            <summary>
            Resume a file transfer if the file already exists.  Otherwise, create a new file.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.CharEncoding">
            <summary>
            FTP command and response encoding.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.CharEncoding.Ascii">
            <summary>
            Use ASCII encoding to send commands and receive responses.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.CharEncoding.Utf8">
            <summary>
            Use UTF-8 encoding to send commands and receive responses.  
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.ListingMethod">
            <summary>
            Enumeration representing the type of file and directory listing method to use and commands to issue
            to the FTP server to retrieve file and directory information.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.ListingMethod.List">
            <summary>
            Always use the standard LIST command with no additional argument information when retrieving a directory listing from the FTP server.  
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.ListingMethod.ListAl">
            <summary>
            Always use the standard LIST command with the additional argument '-al' when retrieving a directory listing from the FTP server.  
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.ListingMethod.Mlsx">
            <summary>
            Always use the RFC 3659 MLSx commands when retrieving a directory listing from the FTP server.  
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.ListingMethod.Automatic">
            <summary>
            Let the Starksoft FtpClient figure out which option to use when retrieve a directory listing from the FTP server.  
            </summary>
            <remarks>
            The Starksoft FtpClient will first attempt to use the MLSx command, if that command is not available it will automatically downgrade to the
            LIST 'al' command.  
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpClient">
            <summary>
            The Startsoft FtpClient library for .NET is a fully .NET coded RFC 959 compatible FTP object component that supports the RFC 959, SOCKS and HTTP proxies, SSLv2, SSLv3, and TLSv1
            (explicit and implicit) as well as automatic file integrity checks on all data transfers.  The component library also supports a pluggable directory listing parser that can be extended 
            by the developer to parse unique directory formats returned by odd or old FTP servers.  Most methods are available to call in a standard blocking pattern or the non-blocking .NET 2.0 
            Async pattern which features a callback event handler that returns the result on background thread.
            </summary>
            <remarks>
            <para>
            The FtpClient supports following FTP commands: 
                USER    RMD     CDUP    CWD     STOU    RETR    AUTH    XSHA512  CLNT
                PASS    RETR    DELE    PORT    APPE    MDTM    PROT    OPTS     HASH
                QUIT    PWD     TYPE    PASV    REST    SIZE    MODE    SITE     RANG
                MKD     SYST    MODE    STOR    RNFR    FEAT    XSHA1   CHMOD    MLST
                NLST    HELP    RNTO    SITE    ALLO    QUIT    XMD5    MFMT     MLSD
                ABORT   STAT    LIST    NOOP    PBSZ    XCRC    XSHA256 MFCT
            </para>
            <para>
            Custom FTP server commands can be executed using the Quote() method.  This allows the FtpClient object to handle
            certain custom commands that are not supported by the RFC 959 standard but are required by specific FTP server
            implementations for various tasks.  
            </para>
            <code>
            string result = "";
            using (FtpClient ftp = new FtpClient("ftp.gnu.org"))
            {
                result = ftp.Quote("SITE ZONE"); 
            } // using end bracket closes connection
            </code>
            <para>
            The Starksoft FtpClient Component for .NET supports SOCKS v4, SOCKS v4a, SOCKS v5, and HTTP proxy servers.  The proxy settings are not read
            from the local web browser proxy settings so deployment issues are not a problem with using proxy connections.  In addition the library also
            supports active and passive (firewall friendly) mode transfers.  The Starksoft FtpClient Component for .NET supports data compression, bandwidth throttling,
            and secure connections through SSL (Secure Socket Layer) and TLS.  The Starksoft FtpClient Component for .NET also supports automatic transfer integrity checks via 
            CRC, MD5, SHA1, SHA-256, and SHA-512.  The FtpClient object can parse many different directory listings from various FTP server implementations.  But for those servers that are difficult to 
            parse of produce strange directory listings you can write your own ftp item parser.  See the IFtpItemParser interface
            for more information and an example parser.     
            </para>
            <para>
            The FtpClient libary has been tested with the following FTP servers and file formats.
            <list type="">
                <item>FileZilla</item>
                <item>IIS Microsoft Windows 2000 and Windows 2003 server</item>
                <item>Microsoft FTP server running IIS 5.0</item>
                <item>Gene6FTP Server</item>
                <item>ProFTPd</item>
                <item>Wu-FTPd</item>
                <item>WS_FTP Server (by Ipswitch)</item>
                <item>Serv-U FTP Server</item>
                <item>GNU FTP server</item>
                <item>Many public FTP servers</item>
            </list>
            </para>
            </remarks>
            <example>
            <code>
            using (FtpClient ftp = new FtpClient("ftp.gnu.org"))
            {
                ftp.DataTransferMode = DataTransferMode.Passive; 
                ftp.Open("anonymous", "myemail@host.com");
                ftp.GetFile("somefile", "c:\\somefile"); 
            } // using end bracket closes connection
            </code>
            </example>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpBase">
            <summary>
            Base abstract class for FtpClient.  Implements FTP network protocols.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.#ctor(System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol)">
            <summary>
            Initializes a new instance of the FtpNetworkAdapter class.
            </summary>
            <param name="port">Port number the adapter is to communicate on.</param>
            <param name="securityProtocol">Value indicating what secure security communications protocol should be used (if any).</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.#ctor(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol)">
            <summary>
            Initializes a new instance of the FtpNetworkAdapter class.
            </summary>
            <param name="host">Host the adapter is to communicate on.</param>
            <param name="port">Port number the adapter is to communicate on.</param>
            <param name="securityProtocol">Value indicating what secure security communications protocol should be used (if any).</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.CancelAsync">
            <summary>
            Cancels any asychronous operation that is currently active.
            </summary>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.IO.Stream,System.Boolean)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.OpenAsync(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,Starksoft.Net.Ftp.FileAction)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.GetHash(Starksoft.Net.Ftp.HashingAlgorithm,System.String)">
            <summary>
            Gets the hash value from the FTP server for the file specified.  
            Use this value to compare a local hash value to determine file integrity.
            </summary>
            <param name="algorithm">Hashing function to use.</param>
            <param name="path">Path to the file ont the remote FTP server.</param>
            <returns>Hash value in a string format.</returns>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.ComputeHash(Starksoft.Net.Ftp.HashingAlgorithm,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.GetHash(Starksoft.Net.Ftp.HashingAlgorithm,System.String,System.Int64,System.Int64)">
            <summary>
            Gets the hash value from the FTP server for the file specified.  
            Use this value to compare a local hash to determine file integrity.
            </summary>
            <param name="algorithm">Hashing function to use.</param>
            <param name="path">Path to the file on the remote FTP server.</param>
            <param name="startPosition">Byte position of where the server should begin computing the hash.</param>
            <param name="endPosition">Byte position of where the server should end computing the hash.</param>
            <returns>Hash value in a string format.</returns>
            <remarks>
            FTP file hashing is not a fully ratified RFC standard and therefore is not widely supported.  There is
            a convention that some FTP server support that allows for partial file hashing.  The command that allow
            partial file hashing are XCRC, XMD5, XSHA1, XSHA256, XSHA512 as well as other variations not listed.
            When computing a CRC, MD5 or SHA1 on a server that supports the commands, an optional startPosition
            and endPosition value can also be specified.  These optional parameters allow for partial file hashing 
            which can be used while resuming a file transfer. In that way only the additional bytes are hashed 
            for accuracy and not the entire file on the FTP server.
            
            The second FTP file hashing implementation is a RFC draft specification and uses a new FTP command named HASH.
            The default hashing algorithm can be set with the OPTS HASH command specifying the supported algorithm as an argument.
            Optionally, the HASH command supports partial file hashing with another command called RANG.  The RANG command
            requires a byte range to use when calculating the file hash.  Partial file hashing with HASH is only supported if the 
            command RANG is also a supported.  The HASH command also has several additional return error codes.  For example, 
            an FTP server that implements the HASH command should reply with a 450 reply if the server is busy.  This signals
            that the client can try again some time later.  In addition, an FTP server that implements the HASH command should reply with 
            a 501 reply to the OPTS HASH command if the user has requested an unknown or unsupported algorithm.
            
            The Starksoft FtpClient will attempt to determine which hashing command features are enabled on the FTP server 
            and formulate the hashing request accordingly.  The default hashing command is always HASH.  If HASH is not available, the 
            FtpClient will attempt to execute the appropriate alternative XCRC, XMD5, XSHA1, XSHA256 or XSHA512 command.  If the
            alternate command is not supported then a FileHashingException will be thrown.
            
            For partial file hashing, if HASH is supported but RANG is not, the FtpClient will attempted to execute the approriate XCRC, XMD5, XSHA1, 
            XSHA256 or XSHA512 command instead.  If the FTP server does not support the alternate hashing command then an exception will be thrown.
            
            See RFC draft-ietf-ftpext2-hash-03 for more information            
            http://tools.ietf.org/html/draft-ietf-ftpext2-hash-03#section-3.2
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.ComputeHash(Starksoft.Net.Ftp.HashingAlgorithm,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.SetHashOption(Starksoft.Net.Ftp.HashingAlgorithm)">
            <summary>
            Sets the hashing algorithm option on the remote FTP server.
            </summary>
            <remarks>
            Not all FTP servers support the HASH feature.
            </remarks>
            <param name="algorithm">Hasing algorithm to use</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:Starksoft.Net.Ftp.FtpCommandNotSupportedException"></exception>
            <exception cref="T:Starksoft.Net.Ftp.FtpHashingException"></exception>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.ComputeHash(Starksoft.Net.Ftp.HashingAlgorithm,System.String)">
            <summary>
            Computes a cryptographic hash or CRC value for a local file.
            </summary>
            <param name="hash">Hashing function to use.</param>
            <param name="localPath">Path to file to perform hashing operation on.</param>
            <returns>Hash value in a string format.</returns>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.GetHash(Starksoft.Net.Ftp.HashingAlgorithm,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.ComputeHash(Starksoft.Net.Ftp.HashingAlgorithm,System.IO.Stream)">
            <summary>
            Computes a hash value for a Stream object.
            </summary>
            <param name="hash">Hashing function to use.</param>
            <param name="inputStream">Any System.IO.Stream object.</param>
            <returns>Hash value in a string format.</returns>
            <remarks>
            The Stream object must allow reads and must allow seeking.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.GetHash(Starksoft.Net.Ftp.HashingAlgorithm,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.ComputeHash(Starksoft.Net.Ftp.HashingAlgorithm,System.IO.Stream,System.Int64)">
            <summary>
            Computes a hash value for a Stream object at a specific start position.
            </summary>
            <param name="hash">Hashing function to use.</param>
            <param name="inputStream">Any System.IO.Stream object.</param>
            <param name="startPosition">Byte position of where the hash computation should begin.</param>
            <returns>Hash value in a string format.</returns>
            <remarks>
            The Stream object must allow reads and must allow seeking.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.GetHash(Starksoft.Net.Ftp.HashingAlgorithm,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.GetFeatures">
            <summary>
            Get the additional features supported by the remote FTP server as a text string.  
            </summary>
            <returns>A string containing the additional features beyond the RFC 959 standard supported by the FTP server.</returns>
            <remarks>
            This command is an additional feature beyond the RFC 959 standard and therefore is not supported by all FTP servers.        
            </remarks>
            <exception cref="T:Starksoft.Net.Ftp.FtpFeatureException"></exception>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.SendRequest(Starksoft.Net.Ftp.FtpRequest)">
            <summary>
            Send a FTP command request to the server.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.CreateAsyncWorker">
            <summary>
            creates a new async worker object for the async events to use.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.CloseAllConnections">
            <summary>
            Closes all connections to the FTP server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.AbortMonitorThread">
            <summary>
            The monitor thread should close automatically once the command connection is terminated.  If it does not close properly, force it to close.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.WaitForHappyCodes(System.Int32,Starksoft.Net.Ftp.FtpResponseCode[])">
            <summary>
            Waits until a happy code has been returned by the FTP server or times out.
            </summary>
            <param name="timeout">Maximum time to wait before timing out.</param>
            <param name="happyResponseCodes">Server response codes to wait for.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.GetClientIPv4Address">
            <summary>
            This method is used for obtaining the IPv4 IPAddress object for FTP active
            connection (PORT).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.GetClientIPv6Address">
            <summary>
            This method is used for obtaining the IPv6 IPAddress object for FTP active
            connection (EPRT).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.SendEpsvCmd(System.String@,System.Int32@)">
            <summary>
            Send the Extended Passive Mode (EPSV) command to the FTP host server.
            </summary>
            <remarks>
            The EPSV command tells the server to enter a passive FTP session rather than Active. 
            (Its use is required for IPv6.) This allows users behind routers/firewalls to connect 
            over FTP when they might not be able to connect over an Active (PORT/EPRT) FTP session. 
            EPSV mode has the server tell the client where to connect for the data port on the server.
            </remarks>
            <param name="host">Host name returned by the FTP server or the default host name.</param>
            <param name="port">Port number to connect to returned by FTP server.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.SendPasvCmd(System.String@,System.Int32@)">
            <summary>
            Send the Passive Mode (PASV) command to the FTP host server.
            </summary>
            <remarks>
            This command tells the server to enter a passive FTP session rather than Active. 
            This allows users behind routers/firewalls to connect over FTP when they might not 
            be able to connect over an Active (PORT) FTP session. PASV mode has the server tell 
            the client where to connect for the data port on the server.  PASV mode only works
            with IPv4.  The Extended Passive Mode command must be used for IPv6 FTP host addresses.
            </remarks>
            <param name="host">Host name returned by the FTP server or the default host name.</param>
            <param name="port">Port number to connect to returned by FTP server.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.CreateSslStream(System.IO.Stream)">
            <summary>
            Creates an SSL or TLS secured stream.
            </summary>
            <param name="stream">Unsecured stream.</param>
            <returns>Secured stream</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.Dispose">
            <summary>
            Disposes all objects and connections.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.Dispose(System.Boolean)">
            <summary>
            Dispose Method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBase.Finalize">
            <summary>
            Dispose deconstructor.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpBase.ServerResponse">
            <summary>
            Server response event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpBase.ClientRequest">
            <summary>
            Server request event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpBase.TransferProgress">
            <summary>
            Data transfer progress event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpBase.TransferComplete">
            <summary>
            Data transfer complete event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpBase.ValidateServerCertificate">
            <summary>
            Security certificate authentication event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpBase.ConnectionClosed">
            <summary>
            Connection closed event.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.Features">
            <summary>
            Get a reference to the internal features list.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.IsAsyncCanceled">
            <summary>
            Gets a value indicating whether an asynchronous operation is canceled.
            </summary>
            <remarks>Returns true if an asynchronous operation is canceled; otherwise, false.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.IsBusy">
            <summary>
            Gets a value indicating whether an asynchronous operation is running.
            </summary>
            <remarks>Returns true if an asynchronous operation is running; otherwise, false.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.Port">
            <summary>
            Gets or sets the current port number used by the FtpClient to make a connection to the FTP server.
            </summary>
            <remarks>
            The default value is '80'.  This setting can only be changed when the 
            connection to the FTP server is closed.  And FtpException is thrown if this 
            setting is changed when the FTP server connection is open.
            
            Returns an integer representing the port number used to connect to a remote server.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.Host">
            <summary>
            Gets or sets a text value containing the current host used by the FtpClient to make a connection to the FTP server.
            </summary>
            <remarks>
            This value may be in the form of either a host name or IP address.
            This setting can only be changed when the 
            connection to the FTP server is closed.  
            
            Returns a string with either the host name or host ip address.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.Client">
            <summary>
            Gets or sets a text value containing the IPv4 or IPv6 client IP address used by the FtpClient to make active connections to the FTP server.
            </summary>
            <remarks>
            The NetworkProtocol property must be properly specified and must match the type of client IP address specified.  For example, if an IPv6
            address is specified in the Client property, the NetworkProtocol must be set to IPv6.
            
            The client IP address is not required and can be optionally provided as a IP address for the client to use when transmitted
            Active mode PORT command information to the FTP server.  If this value is empty the Starksoft FtpClient will choose an 
            available IP address on the client machine.  In some cases it is desirable to provide a specific IP address of the external border router
            to an internal network.  Not all firewall devices will automatically switch the IP address for the PORT or EPRT commands.  In those cases
            the external facing IP address can be provided for use.  In addition, some clients may find that a specific IP address on the client
            local host machine should be used for making Active mode connections.  Note the IP address provided is not verified as a valid local
            host IP address.
            
            This value may be in the form of either a host name or IP address.
            This setting can only be changed when the 
            connection to the FTP server is closed.  
            Returns a string with either the host name or host ip address.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.NetworkProtocol"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.Host"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.Port"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.SecurityProtocol">
            <summary>
            Gets or sets a value indicating what security protocol such as Secure Sock Layer (SSL) should be used.
            </summary>
            <remarks>
            The default value is 'None'.  This setting can only be changed when the 
            connection to the FTP server is closed.  An FtpException is thrown if this 
            setting is changed when the FTP server connection is open.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.SecurityCertificates"/>
            <seealso cref="E:Starksoft.Net.Ftp.FtpBase.ValidateServerCertificate"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.NetworkProtocol">
            <summary>
            Gets or sets a value indicating what network protocol should be used..
            </summary>
            <remarks>
            The default value is 'Ipv4'.  This setting can only be changed when the 
            connection to the FTP server is closed.  An FtpException is thrown if this 
            setting is changed when the FTP server connection is open.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.Client"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.Host"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.Port"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.SecurityCertificates">
            <summary>
            Get Client certificate collection used when connection with a secured SSL/TSL protocol.  Add your client certificates 
            if required to connect to the remote FTP server.
            </summary>
            <remarks>Returns a X509CertificateCollection list contains X.509 security certificates.</remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.SecurityProtocol"/>
            <seealso cref="E:Starksoft.Net.Ftp.FtpBase.ValidateServerCertificate"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.IsCompressionEnabled">
            <summary>
            Gets or sets a value indicating that the client will use compression when uploading and downloading
            data.
            </summary>
            <remarks>
            This value turns on or off the compression algorithm DEFLATE to facility FTP data compression which is compatible with
            FTP servers that implement compression via the zLib compression software library.  The default value is 'False'.  
            This setting can only be changed when the system is not busy conducting other operations.  
            
            Returns True if compression is enabled; otherwise False;
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.MaxUploadSpeed">
            <summary>
            Gets or sets an Integer value representing the maximum upload speed allowed 
            for data transfers in kilobytes per second.
            </summary>
            <remarks>
            Set this value when you would like to throttle back any upload data transfers.
            A value of zero means there is no restriction on how fast data uploads are 
            conducted.  The default value is zero.  This setting is used to throttle data traffic so the FtpClient does
            not consume all available network bandwidth.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.MaxDownloadSpeed"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.MaxDownloadSpeed">
            <summary>
            Gets or sets an Integer value representing the maximum download speed allowed 
            for data transfers in kilobytes per second.
            </summary>
            <remarks>
            Set this value when you would like to throttle back any download data transfers.
            A value of zero means there is no restriction on how fast data uploads are 
            conducted.  The default value is zero.  This setting is used to throttle data traffic so the FtpClient does
            not consume all available network bandwidth.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.MaxUploadSpeed"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.LastResponse">
            <summary>
            Gets only the last response from the FTP server.
            </summary>
            <remarks>Returns a FtpResponse object containing the last FTP server response; other the value null (or Nothing in VB) is returned.</remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.LastResponseList">
            <summary>
            Gets the list of all responses since the last command was issues to the server.
            </summary>
            <remarks>Returns a FtpResponseCollection list containing all the responses.</remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.TcpBufferSize">
            <summary>
            Gets or sets the TCP buffer size used when communicating with the FTP server in bytes.
            </summary>
            <remarks>Returns an integer value representing the buffer size.  The default value is 8192.</remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.TcpTimeout">
            <summary>
            Gets or sets the TCP timeout used when communciating with the FTP server in milliseconds.
            </summary>
            <remarks>
            Default value is 30000 (30 seconds).
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.TransferTimeout"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.CommandTimeout"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.TransferTimeout">
            <summary>
            Gets or sets the data transfer timeout used when communicating with the FTP server in milliseconds.
            </summary>
            <remarks>
            Default value is 30000 (30 seconds).
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.TcpTimeout"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.CommandTimeout"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.CommandTimeout">
            <summary>
            Gets or sets the FTP command timeout used when communciating with the FTP server in milliseconds.
            </summary>
            <remarks>
            Default value is 30000 (30 seconds).
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.TcpTimeout"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.TransferTimeout"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.ActivePortRangeMin">
            <summary>
            The beginning port number range used by the FtpClient when opening a local 'Active' port.  The default value is 4051.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be less than or equal to the ActivePortRangeMax value.</exception>
            <remarks>
            When the FtpClient is in 'Active' mode a local port is opened for communications from the FTP server.
            The FtpClient will attempt to open an unused TCP listener port between the ActivePortRangeMin and ActivePortRangeMax values.
            Default value is 50000.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.ActivePortRangeMax"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.DataTransferMode"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.ActivePortRangeMax">
            <summary>
            The ending port number range used by the FtpClient when opening a local 'Active' port.  The default value is 4080.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value must be greater than or equal to the ActivePortRangeMin value.</exception>
            <remarks>
            When the FtpClient is in 'Active' mode a local port is opened for communications from the FTP server.
            The FtpClient will attempt to open an unused TCP listener port between the ActivePortRangeMin and ActivePortRangeMax values.
            Default value is 50080.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.ActivePortRangeMin"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.DataTransferMode"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.DataTransferMode">
            <summary>
            Gets or sets the data transfer mode to either Active or Passive.
            </summary>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.ActivePortRangeMin"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpBase.ActivePortRangeMax"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.Proxy">
             <summary>
             Gets or sets the the proxy object to use when establishing a connection to the remote FTP server.
             </summary>
             <remarks>Create a proxy object when traversing a firewall.</remarks>
             <code>
             FtpClient ftp = new FtpClient();
            
             // create an instance of the client proxy factory for the an ftp client
             ftp.Proxy = (new ProxyClientFactory()).CreateProxyClient(ProxyType.Http, "localhost", 6588);
                    
             </code>
             <seealso cref="T:Starksoft.Net.Proxy.ProxyClientFactory"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.IsConnected">
            <summary>
            Gets the connection status to the FTP server.
            </summary>
            <remarks>Returns True if the connection is open; otherwise False.</remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpBase.ConnectionClosed"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.AutomaticFileHashing">
            <summary>
            Sets the automatic file integrity setting (cryptographic hash or CRC value) option on all data transfers (upload and download).
            </summary>
            <remarks>
            The FtpClient library will throw an FtpFileIntegrityException if the file integrity value do not match.
            
            Not all FTP servers support file integrity values such as SHA1, CRC32, or MD5.  If you server does support
            one of these file integrity options, you can set this property and the FtpClient will automatically check
            each file that is transferred to make sure the hash values match.  If the values do not match, an exception
            is thrown.
            </remarks>
            <seealso cref="T:Starksoft.Net.Ftp.FtpHashingException"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.GetHash(Starksoft.Net.Ftp.HashingAlgorithm,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.ComputeHash(Starksoft.Net.Ftp.HashingAlgorithm,System.String)"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.AlwaysAcceptServerCertificate">
            <summary>
            Gets or sets the boolean value indicating if the server certificate should
            always be accepted for TLS/SSL secure connections.
            </summary>
            <remarks>
            If this value is set to true, the ValidateServerCertificate event will not fire and all
            TLS/SSL connections will not ask the client to validate the integrity of the server certificate.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpBase.Encoding">
            <summary>
            Gets or sets the internal character encoding object use to encode the request and response data.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.#ctor">
            <summary>
            FtpClient default constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.#ctor(System.String)">
            <summary>
            Constructor method for FtpClient.  
            </summary>
            <param name="host">String containing the host name or ip address of the remote FTP server.</param>
            <remarks>
            This method takes one parameter to specify
            the host name (or ip address).
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.#ctor(System.String,System.Int32)">
            <summary>
            Constructor method for FtpClient.  
            </summary>
            <param name="host">String containing the host name or ip address of the remote FTP server.</param>
            <param name="port">Port number used to connect to the remote FTP server.</param>
            <remarks>
            This method takes two parameters that specify 
            the host name (or ip address) and the port to connect to the host.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.#ctor(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol)">
            <summary>
            Constructor method for FtpClient.  
            </summary>
            <param name="host">String containing the host name or ip address of the remote FTP server.</param>
            <param name="port">Port number used to connect to the remote FTP server.</param>
            <param name="securityProtocol">Enumeration value indicating what security protocol (such as SSL) should be enabled for this connection.</param>
            <remarks>
            This method takes three parameters that specify 
            the host name (or ip address), port to connect to and what security protocol should be used when establishing the connection.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Open(System.String,System.String)">
            <summary>
            Opens a connection to the remote FTP server and log in with user name and password credentials.
            </summary>
            <param name="user">User name.  Many public ftp allow for this value to 'anonymous'.</param>
            <param name="password">Password.  Anonymous public ftp servers generally require a valid email address for a password.</param>
            <remarks>Use the Close() method to log off and close the connection to the FTP server.</remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.OpenAsync(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Close"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Reopen"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Reopen">
            <summary>
            Reopens a lost ftp connection.
            </summary>
            <remarks>
            If the connection is currently open or the connection has never been open and FtpException is thrown.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.ChangeUser(System.String,System.String)">
            <summary>
            Change the currently logged in user to another user on the FTP server.
            </summary>
            <param name="user">The name of user.</param>
            <param name="password">The password for the user.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Close">
            <summary>
            Closes connection to the FTP server.
            </summary>
            <seealso cref="E:Starksoft.Net.Ftp.FtpBase.ConnectionClosed"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Reopen"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Open(System.String,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectoryMultiPath(System.String)">
            <summary>
            Changes the current working directory on older FTP servers that cannot handle a full path containing
            multiple subdirectories.  This method will separate the full path into separate change directory commands
            to support such systems.
            </summary>
            <param name="path">Path of the new directory to change to.</param>
            <remarks>Accepts both foward slash '/' and back slash '\' path names.</remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectory(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetWorkingDirectory"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectory(System.String)">
            <summary>
            Changes the current working directory on the server.  Some FTP server will not accept this command 
            if the path contains mutiple directories.  For those FTP server implementations see the method
            ChangeDirectoryMultiPath(string).
            </summary>
            <param name="path">Path of the new directory to change to.</param>
            <remarks>Accepts both foward slash '/' and back slash '\' path names.</remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectoryMultiPath(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetWorkingDirectory"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetWorkingDirectory">
            <summary>
            Gets the current working directory.
            </summary>
            <returns>A string value containing the current full working directory path on the FTP server.</returns>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectory(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectoryUp"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.DeleteFile(System.String)">
            <summary>
            Deletes a file on the remote FTP server.  
            </summary>
            <param name="path">The path name of the file to delete.</param>
            <remarks>
            The file is deleted in the current working directory if no path information 
            is specified.  Otherwise a full absolute path name can be specified.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to delete the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.DeleteDirectory(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Abort">
            <summary>
            Aborts an action such as transferring a file to or from the server.  
            </summary>
            <remarks>
            The abort command is sent up to the server signaling the server to abort the current activity.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.MakeDirectory(System.String)">
            <summary>
            Creates a new directory on the remote FTP server.  
            </summary>
            <param name="path">The name of a new directory or an absolute path name for a new directory.</param>
            <remarks>
            If a directory name is given for path then the server will create a new subdirectory 
            in the current working directory.  Optionally, a full absolute path may be given.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to make the subdirectory using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)">
            <summary>
            Moves a file on the remote FTP server from one directory to another.  
            </summary>
            <param name="fromPath">Path and/or file name to be moved.</param>
            <param name="toPath">Destination path specifying the directory where the file will be moved to.</param>
            <remarks>
            This method actually results in several FTP commands being issued to the server to perform the physical file move.  
            This method is available for your convenience when performing common tasks such as moving processed files out of a pickup directory
            and into a archive directory.
            Note that some older FTP server implementations will not accept a full path to a filename.  On those systems this method may not work
            properly.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory from the FTP server.
            </summary>
            <param name="path">Directory to delete.</param>
            <remarks>
            The path can be either a specific subdirectory relative to the 
            current working directory on the server or an absolute path to 
            the directory to remove.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the parent directory of the directory you wish to delete using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.DeleteFile(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetHelp">
            <summary>
            Executes the specific help dialog on the FTP server.  
            </summary>
            <returns>
            A string contains the help dialog from the FTP server.
            </returns>
            <remarks>
            Every FTP server supports a different set of commands and this commands 
            can be obtained by the FTP HELP command sent to the FTP server.  The information sent
            back is not parsed or processed in any way by the FtpClient object.  
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFileDateTime(System.String,System.Boolean)">
            <summary>
            Retrieves the data and time for a specific file on the ftp server as a Coordinated Universal Time (UTC) value (formerly known as GMT). 
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="adjustToLocalTime">Specifies if modified date and time as reported on the FTP server should be adjusted to the local time zone with daylight savings on the client.</param>
            <returns>
            A date time value.
            </returns>
            <remarks>
            This function uses the MDTM command which is an additional feature command and therefore not supported
            by all FTP servers.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileSize(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.SetModifiedDateTime(System.String,System.DateTime)">
            <summary>
            Set the modified date and time value for a specific file.  Not all FTP servers support this command.  In addition
            some FTP servers do not support a qualified or relative path value.
            </summary>
            <param name="path">Filename or fully qualified or partial path.  Note that note all FTP server support a qualified or partial path</param>
            <param name="dateTime">New modified date and time value.</param>
            <exception cref="T:Starksoft.Net.Ftp.FtpCommandNotSupportedException"></exception>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.SetCreatedDateTime(System.String,System.DateTime)">
            <summary>
            Set the created date and time value for a specific file.  Not all FTP servers support this command.  In addition
            some FTP servers do not support a qualified or relative path value.
            </summary>
            <param name="path">Filename or fully qualified or partial path.  Note that note all FTP server support a qualified or partial path</param>
            <param name="dateTime">New created date and time value.</param>
            <exception cref="T:Starksoft.Net.Ftp.FtpCommandNotSupportedException"></exception>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetStatus">
            <summary>
            Retrieves the specific status for the FTP server.  
            </summary>
            <remarks>
            Each FTP server may return different status dialog information.  The status information sent
            back is not parsed or processed in any way by the FtpClient object. 
            </remarks>
            <returns>
            A string containing the status of the FTP server.
            </returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectoryUp">
            <summary>
            Changes the current working directory on the FTP server to the parent directory.  
            </summary>
            <remarks>
            If there is no parent directory then ChangeDirectoryUp() will not have 
            any affect on the current working directory.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.ChangeDirectory(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetWorkingDirectory"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.TryGetFileSize(System.String,System.Int64@)">
            <summary>
            Get the file size for a file on the remote FTP server.  
            </summary>
            <param name="path">The name and/or path to the file.</param>
            <param name="size">Size of the file.</param>
            <returns>An integer specifying the file size; otherwise -1</returns>
            <remarks>
            This method will attempt to acquire the size of the file using server commands in the following order.
            (1) Use the SIZE command if it is a supported feature.
            (2) Use the MLST command if it is a supported feature and the DirListingMethod is set to Mlsx or Automatic.
            (3) Use the LIST al command if DirListingMethod is set to ListAl.
            (4) Use the LIST command with no optional parameters.
            
            The path can be file name relative to the current working directory or an absolute path.  This command is an additional feature 
            that is not supported by all FTP servers.
            
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to get the file size using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileSize(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileDateTime(System.String,System.Boolean)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFileSize(System.String)">
            <summary>
            Get the file size for a file on the remote FTP server.  
            </summary>
            <param name="path">The name and/or path to the file.</param>
            <returns>An integer specifying the file size.</returns>
            <remarks>
            This method will attempt to acquire the size of the file using server commands in the following order.
            (1) Use the SIZE command if it is a supported feature.
            (2) Use the MLST command if it is a supported feature and the DirListingMethod is set to Mlsx or Automatic.
            (3) Use the LIST al command if DirListingMethod is set to ListAl.
            (4) Use the LIST command with no optional parameters.
            
            The path can be file name relative to the current working directory or an absolute path.  This command is an additional feature 
            that is not supported by all FTP servers.
            
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to get the file size using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="!:TryGetFileSize(string, long)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileDateTime(System.String,System.Boolean)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetStatus(System.String)">
            <summary>
            Retrieves the specific status for a file on the FTP server.  
            </summary>
            <param name="path">
            The path to the file.
            </param>
            <returns>
            A string containing the status for the file.
            </returns>
            <remarks>
            Each FTP server may return different status dialog information.  The status information sent
            back is not parsed or processed in any way by the FtpClient object. 
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to get the status of the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.AllocateStorage(System.Int64)">
            <summary>
            Allocates storage for a file on the FTP server prior to data transfer from the FTP client.  
            </summary>
            <param name="size">
            The storage size to allocate on the FTP server.
            </param>
            <remarks>
            Some FTP servers may return the client to specify the storage size prior to data transfer from the FTP client to the FTP server.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetSystemType">
            <summary>
            Retrieves a string identifying the remote FTP system.  
            </summary>
            <returns>
            A string contains the server type.
            </returns>
            <remarks>
            The string contains the word "Type:", and the default transfer type 
            For example a UNIX FTP server will return 'UNIX Type: L8'.  A Windows 
            FTP server will return 'WINDOWS_NT'.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)">
            <summary>
            Uploads a local file specified in the path parameter to the remote FTP server.  
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server.  
            A unique file name is created by the server.    
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.IO.Stream)">
            <summary>
            Uploads any stream object to the remote FTP server and stores the data under a unique file name assigned by the FTP server.  
            </summary>
            <param name="inputStream">Any stream object on the local client machine.</param>
            <remarks>
            The stream is uploaded to the current working directory on the remote server.  
            A unique file name is created by the server to store the data uploaded from the stream.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>  
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String)">
            <summary>
            Retrieves a remote file from the FTP server and writes the data to a local file
            specfied in the localPath parameter.  If the local file already exists a System.IO.IOException is thrown.
            </summary>
            <remarks>
            To retrieve a remote file that you need to overwrite an existing file with or append to an existing file
            see the method GetFile(string, string, FileAction).
            </remarks>
            <param name="remotePath">A path of the remote file.</param>
            <param name="localPath">A fully qualified local path to a file on the local machine.</param>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Retrieves a remote file from the FTP server and writes the data to a local file
            specfied in the localPath parameter.
            </summary>
            <remarks>
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to get the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <param name="remotePath">A path and/or file name to the remote file.</param>
            <param name="localPath">A fully qualified local path to a file on the local machine.</param>
            <param name="action">The type of action to take.</param>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Retrieves a remote file from the FTP server and writes the data to a local stream object
            specfied in the outStream parameter.
            </summary> 
            <param name="remotePath">A path and/or file name to the remote file.</param>
            <param name="outStream">An output stream object used to stream the remote file to the local machine.</param>
            <param name="resume">A true/false value to indicate if the file download needs to be restarted due to a previous partial download.</param>
            <remarks>
            If the remote path is a file name then the file is downloaded from the FTP server current working directory.  Otherwise a fully qualified
            path for the remote file may be specified.  The output stream must be writeable and can be any stream object.  Finally, the restart parameter
            is used to send a restart command to the FTP server.  The FTP server is instructed to restart the download process at the last position of
            of the output stream.  Not all FTP servers support the restart command.  If the FTP server does not support the restart (REST) command,
            an FtpException error is thrown.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to get the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Exists(System.String)">
            <summary>
            Tests to see if a path exists on the remote server.  The current working directory must be the
            parent or root directory of the file or directory whose existence is being tested.  For best results, 
            call this method from the root working directory ("/").
            </summary>
            <param name="path">The full path to the remote directory relative to the current working directory you want to test for existence of.</param>
            <returns>Boolean value indicating if directory exists or not.</returns>
            <remarks>This method will execute a change working directory (CWD) command prior to testing to see if the  
            file exists.  The original working directory will be changed back to the original value
            after this method has completed.  This method may not work on systems where the directory listing is not being
            parsed correctly.  If the method call GetDirList() does not work properly with your FTP server, this method may not
            produce reliable results.  This method will also not produce reliable results if the directory or file is hidden on the
            remote FTP server.</remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Exists(System.String,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Exists(System.String,System.String)">
            <summary>
            Tests to see if a file exists on the remote server.  The current working directory must be the
            parent or root directory of the file or directory whose existence is being tested.  For best results, 
            call this method from the root working directory ("/").
            </summary>
            <param name="path">The full path to the remote directory relative to the current working directory.</param>
            <param name="filename">The name of the file (or directory) test for existence of.</param>
            <returns>Boolean value indicating if file exists or not.</returns>
            <remarks>This method will execute a change working directory (CWD) command prior to testing to see if the  
            file exists.  The original working directory will be changed back to the original value
            after this method has completed.  This method may not work on systems where the directory listing is not being
            parsed correctly.  If the method call GetDirList() does not work properly with your FTP server, this method may not
            produce reliable results.  This method will also not produce reliable results if the directory or file is hidden on the
            remote FTP server.</remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Exists(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetNameList">
            <summary>
            Retrieves a file name listing of the current working directory from the 
            remote FTP server using the NLST command.
            </summary>
            <returns>A string containing the file listing from the current working directory.</returns>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)">
            <summary>
            Retrieves a file name listing of the current working directory from the 
            remote FTP server using the NLST command.
            </summary>
            <param name="path">The path to a directory on the remote FTP server.</param>
            <returns>A string containing the file listing from the current working directory.</returns>
            <remarks>
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the parent directory you wish to get the name list using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFileInfo(System.String)">
            <summary>
            Retrieves file information for one specific file system object.
            </summary>
            <param name="path">The path to the file system object on the remote FTP server.</param>
            <returns>A FtpItem object containing the file system object information.</returns>
            <remarks>
            If the FTP features list MLST then the MLST command will be executed and a FtpMlsxItem cast 
            as a FtpItem will be returned.  Otherwise, the standard LIST command will be executed and a
            standard FtpItem object will be returned.
            
            Note that some FTP servers will not accept a full path to the file system object.  On those systems you must navigate to
            the parent directory which contains the file system object using ChangeDirectory() or ChangeDirectoryMultiPath()
            method and invoke the method without any additional path information.
            </remarks>
            <exception cref="T:Starksoft.Net.Ftp.FtpFeatureException"></exception>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText">
            <summary>
            Retrieves a directory listing of the current working directory from the 
            remote FTP server using the LIST command.
            </summary>
            <returns>A string containing the directory listing of files from the current working directory.</returns>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)">
            <summary>
            Retrieves a directory listing of the current working directory from the 
            remote FTP server using the LIST command.
            </summary>
            <param name="path">The path to a directory on the remote FTP server.</param>
            <returns>A string containing the directory listing of files from the current working directory.</returns>
            <remarks>
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the parent directory you wish to get the name list using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirList">
            <summary>
            Retrieves a list of the files from current working directory on the remote FTP 
            server using the LIST command.  
            </summary>
            <returns>FtpItemList collection object.</returns>
            <remarks>
            This method returns a FtpItemList collection of FtpItem objects.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)">
            <summary>
            Retrieves a list of the files from a specified path on the remote FTP 
            server using the LIST command. 
            </summary>
            <param name="path">The path to a directory on the remote FTP server.</param>
            <returns>FtpFileCollection collection object.</returns>
            <remarks>
            This method returns a FtpFileCollection object containing a collection of 
            FtpItem objects.  Some FTP server implementations will not accept a full path to a resource.  On those
            systems it is best to change the working directory using the ChangeDirectoryMultiPath(string) method and then call
            the method GetDirList().
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)">
            <summary>
            Deeply retrieves a list of all files and all sub directories from a specified path on the remote FTP 
            server using the LIST command. 
            </summary>
            <param name="path">The path to a directory on the remote FTP server.</param>
            <returns>FtpFileCollection collection object.</returns>
            <remarks>
            This method returns a FtpFileCollection object containing a collection of 
            FtpItem objects.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the parent directory you wish to get the directory list using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Rename(System.String,System.String)">
            <summary>
            Renames a file or directory on the remote FTP server.
            </summary>
            <param name="name">The name or absolute path of the file or directory you want to rename.</param>
            <param name="newName">The new name or absolute path of the file or directory.</param>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.SetDateTime(System.String,System.DateTime,Starksoft.Net.Ftp.FtpCmd)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.SendCustomCommand(System.String)">
            <summary>
            Send a raw FTP command to the server.  Same method as Quote().
            </summary>
            <param name="command">A string containing a valid FTP command value such as SYST.</param>
            <returns>The raw textual response from the server.</returns>
            <remarks>
            This is an advanced feature of the FtpClient class that allows for any custom or specialized
            FTP command to be sent to the FTP server.  Some FTP server support custom commands outside of
            the standard FTP command list.  The following commands are not supported: PASV, RETR, STOR, STRU, 
            EPRT, and EPSV. The commands LIST, NLST, and MLSD are supported.
            </remarks>
            <example>
            <code>
            FtpClient ftp = new FtpClient("ftp.microsoft.com");
            ftp.Open("anonymous", "myemail@server.com");
            string r = ftp.Quote("SYST");
            System.Diagnostics.Debug.WriteLine(r);
            ftp.Close();
            </code>
            </example>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Quote(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Quote(System.String)">
            <summary>
            Send a raw FTP command to the server.
            </summary>
            <param name="command">A string containing a valid FTP command value such as SYST.</param>
            <returns>The raw textual response from the server.</returns>
            <remarks>
            This is an advanced feature of the FtpClient class that allows for any custom or specialized
            FTP command to be sent to the FTP server.  Some FTP server support custom commands outside of
            the standard FTP command list.  The following commands are not supported: PASV, RETR, STOR, STRU, 
            EPRT, and EPSV. The commands LIST, NLST, and MLSD are supported.
            </remarks>
            <example>
            <code>
            FtpClient ftp = new FtpClient("ftp.microsoft.com");
            ftp.Open("anonymous", "myemail@server.com");
            string r = ftp.Quote("SYST");
            System.Diagnostics.Debug.WriteLine(r);
            ftp.Close();
            </code>
            </example>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.NoOperation">
            <summary>
            Sends a NOOP or no operation command to the FTP server.  This can be used to prevent some servers from logging out the
            interactive session during file transfer process.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.ChangeMode(System.String,System.Int32)">
            <summary>
            Issues a site specific change file mode (CHMOD) command to the server.  Not all servers implement this command.
            </summary>
            <param name="path">The path to the file or directory you want to change the mode on.</param>
            <param name="octalValue">The CHMOD octal value.</param>
            <remarks>
            Common CHMOD values used on web servers.
            
                  Value 	User 	Group 	Other
                    755 	rwx 	r-x 	r-x
                    744 	rwx 	r--	    r--
                    766 	rwx 	rw- 	rw-
                    777 	rwx 	rwx 	rwx
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory containing the file or directory you wish to change the mode on by using with the 
            ChangeDirectory() or ChangeDirectoryMultiPath() method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.SetDateTime(System.String,System.DateTime,Starksoft.Net.Ftp.FtpCmd)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Rename(System.String,System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Site(System.String)">
            <summary>
            Issue a SITE command to the FTP server for site specific implementation commands.
            </summary>
            <param name="argument">One or more command arguments</param>
            <remarks>
            For example, the CHMOD command is issued as a SITE command.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Uploads a local file specified in the path parameter to the remote FTP server.   
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <param name="remotePath">Filename or full path to file on the remote FTP server.</param>
            <param name="action">The type of put action taken.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server.  The remotePath
            parameter is used to specify the path and file name used to store the file on the remote server.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to put the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>    
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String)">
            <summary>
            Uploads a local file specified in the path parameter to the remote FTP server.   
            An FtpException is thrown if the file already exists.
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <param name="remotePath">Filename or full path to file on the remote FTP server.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server.  The remotePath
            parameter is used to specify the path and file name used to store the file on the remote server.
            To overwrite an existing file see the method PutFile(string, string, FileAction) and specify the 
            FileAction Create.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to put the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>            
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Uploads a local file specified in the path parameter to the remote FTP server.   
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <param name="action">The type of put action taken.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server. 
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>            
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String)">
            <summary>
            Uploads a local file specified in the path parameter to the remote FTP server.   
            An FtpException is thrown if the file already exists.
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server. 
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>    
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.IO.Stream,System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Uploads stream data specified in the inputStream parameter to the remote FTP server.   
            </summary>
            <param name="inputStream">Any open stream object on the local client machine.</param>
            <param name="remotePath">Filename or path and filename of the file stored on the remote FTP server.</param>
            <param name="action">The type of put action taken.</param>
            <remarks>
            The stream is uploaded to the current working directory on the remote server.  The remotePath
            parameter is used to specify the path and file name used to store the file on the remote server.
            Note that some FTP servers will not accept a full path.  On those systems you must navigate to
            the directory you wish to put the file using with the ChangeDirectory() or ChangeDirectoryMultiPath()
            method.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>        
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)">
            <summary>
            File Exchange Protocol (FXP) allows server-to-server transfer which can greatly speed up file transfers.
            </summary>
            <param name="fileName">The name of the file to transfer.</param>
            <param name="destination">The destination FTP server which must be supplied as an open and connected FtpClient object.</param>
            <remarks>
            Both servers must support and have FXP enabled before you can transfer files between two remote servers using FXP.  One FTP server must support PASV mode and the other server must allow PORT commands from a foreign address.  Finally, firewall settings may interfer with the ability of one server to access the other server.
            Starksoft FtpClient will coordinate the FTP negoitaion and necessary PORT and PASV transfer commands.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpClient.FxpTransferTimeout"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/> 
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.TrySetUtf8On">
            <summary>
            Instructs the FTP server to try to set the server to UTF-8 encoding on.  ASCII encoding is assumed on a failure.
            </summary>
            <remarks>
            This method will attempt to execute the OPTS UTF8 ON command if UTF8 is a supported feature and OPTS is a supported command.
            FileZilla and UTF-8 Info: http://wiki.filezilla-project.org/Character_Set
            RFC 2640 - UTF8 options: http://tools.ietf.org/html/rfc2640        
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.SetUtf8On"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.SetUtf8Off"/>
            <returns>True if UTF-8 encoding is set; otherwise false.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.SetUtf8On">
            <summary>
            Instructs the FTP server to set the server to UTF-8 encoding on.
            </summary>
            <remarks>
            This method will attempt to execute the OPTS UTF8 ON command if UTF8 is a supported feature and OPTS is a supported command.
            FileZilla and UTF-8 Info: http://wiki.filezilla-project.org/Character_Set
            RFC 2640 - UTF8 options: http://tools.ietf.org/html/rfc2640        
            </remarks>
            <exception cref="T:Starksoft.Net.Ftp.FtpFeatureException">If UTF-8 encoding is not a supported feature, a FtpFeatureException will be thrown.</exception>
            <exception cref="T:Starksoft.Net.Ftp.FtpCommandNotSupportedException">If OPTS is not a supported command then a FtpCommandNotSupportedException will be thrown.</exception>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.SetUtf8Off"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.TrySetUtf8On"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.SetUtf8Off">
            <summary>
            Instructs the FTP server to set the server to UTF-8 encoding off.
            </summary>
            <remarks>
            This method will attempt to execute the OPTS UTF8 OFF command if UTF8 is a supported feature and OPTS is a supported command.
            FileZilla and UTF-8 Info: http://wiki.filezilla-project.org/Character_Set
            RFC 2640 - UTF8 options: http://tools.ietf.org/html/rfc2640        
            </remarks>
            <exception cref="T:Starksoft.Net.Ftp.FtpFeatureException">If UTF-8 encoding is not a supported feature, a FtpFeatureException will be thrown.</exception>
            <exception cref="T:Starksoft.Net.Ftp.FtpCommandNotSupportedException">If OPTS is not a supported command then a FtpCommandNotSupportedException will be thrown.</exception>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.SetUtf8On"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.TrySetUtf8On"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Options(System.String)">
            <summary>
            Executes the OPTS (Options) command on the FTP server.
            </summary>
            <remarks>
            Every FTP server supports a different set of options that can be set and specified
            to turn on or off specific features on the FTP server.  Use this command to set 
            specific options on or off.
            </remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.SetUtf8On"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.SetUtf8Off"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.TrySetUtf8On"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.TrySetClient">
            <summary>
            Attempt to send the CLieNT command to identify the FTP client.  Some FTP
            servers require this command to function properly and many other ignore it
            or simply do not implement the command.  Errors are ignored.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.TrySetFileTransferType">
            <summary>
            Attempt to set the file transfer type.  If unsuccesful ignore errors
            and set the FileTransferType to 'Unknown'.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.SetCompression">
            <summary>
            Attempt to enable compress if that option has been selected.  If the operation fails
            an exception is thrown and the connection is terminated.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.SetDateTime(System.String,System.DateTime,Starksoft.Net.Ftp.FtpCmd)">
            <summary>
            Set the date and time for a specific file or directory on the server using a specific FTP command.
            </summary>
            <param name="path">The path or name of the file or directory.</param>
            <param name="dateTime">New date to set on the file or directory.</param>
            <param name="cmd">MFCT or MFMT command to use</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync">
            <summary>
            Asynchronously retrieves a list of the files from current working directory on the remote FTP 
            server using the LIST command.  
            </summary>
            <remarks>
            This method returns a FtpItemList collection of FtpItem objects through the GetDirListAsyncCompleted event.
            </remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.GetDirListAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)">
            <summary>
            Asynchronously retrieves a list of the files from a specified path on the remote FTP 
            server using the LIST command. 
            </summary>
            <param name="path">The path to a directory on the remote FTP server.</param>
            <remarks>This method returns a FtpFileCollection object containing a collection of 
            FtpItem objects.  The FtpFileCollection is returned though the GetDirListAsyncCompleted event.</remarks>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync">
            <summary>
            Asynchronous deep retrieval of a list of all files and all sub directories from the current path on the remote FTP 
            server using the LIST command. 
            </summary>
            <remarks>This method returns a FtpFileCollection object containing a collection of FtpItem objects through the GetDirListDeepAsyncCompleted event.</remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)">
            <summary>
            Asynchronous deep retrieval of a list of all files and all sub directories from a specified path on the remote FTP 
            server using the LIST command. 
            </summary>
            <param name="path">The path to a directory on the remote FTP server.</param>
            <remarks>This method returns a FtpFileCollection object containing a collection of 
            FtpItem objects the GetDirListDeepAsyncCompleted event.</remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Asynchronously retrieves a remote file from the FTP server and writes the data to a local file
            specfied in the localPath parameter.
            </summary>
            <param name="remotePath">A path and/or file name to the remote file.</param>
            <param name="localPath">A fully qualified local path to a file on the local machine.</param>
            <param name="action">The type of action to take.</param>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.GetFileAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Asynchronously retrieves a remote file from the FTP server and writes the data to a local stream object
            specfied in the outStream parameter.
            </summary> 
            <param name="remotePath">A path and/or file name to the remote file.</param>
            <param name="outStream">An output stream object used to stream the remote file to the local machine.</param>
            <param name="restart">A true/false value to indicate if the file download needs to be restarted due to a previous partial download.</param>
            <remarks>
            If the remote path is a file name then the file is downloaded from the FTP server current working directory.  Otherwise a fully qualified
            path for the remote file may be specified.  The output stream must be writeable and can be any stream object.  Finally, the restart parameter
            is used to send a restart command to the FTP server.  The FTP server is instructed to restart the download process at the last position of
            of the output stream.  Not all FTP servers support the restart command.  If the FTP server does not support the restart (REST) command,
            an FtpException error is thrown.
            </remarks>        
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.GetFileAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Asynchronously uploads a local file specified in the path parameter to the remote FTP server.   
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <param name="remotePath">Filename or full path to file on the remote FTP server.</param>
            <param name="action">The type of put action taken.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server.  The remotePath
            parameter is used to specify the path and file name used to store the file on the remote server.
            </remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.PutFileAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>  
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.IO.Stream,System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Asynchronously uploads stream data specified in the inputStream parameter to the remote FTP server.   
            </summary>
            <param name="inputStream">Any open stream object on the local client machine.</param>
            <param name="remotePath">Filename or path and filename of the file stored on the remote FTP server.</param>
            <param name="action">The type of put action taken.</param>
            <remarks>
            The stream is uploaded to the current working directory on the remote server.  The remotePath
            parameter is used to specify the path and file name used to store the file on the remote server.
            </remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.PutFileAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>    
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,Starksoft.Net.Ftp.FileAction)">
            <summary>
            Asynchronously uploads a local file specified in the path parameter to the remote FTP server.   
            </summary>
            <param name="localPath">Path to a file on the local machine.</param>
            <param name="action">The type of put action taken.</param>
            <remarks>
            The file is uploaded to the current working directory on the remote server. 
            </remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.PutFileAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileUnique(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFile(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.MoveFile(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)"/>    
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.OpenAsync(System.String,System.String)">
            <summary>
            Asynchronously opens a connection to the remote FTP server and log in with user name and password credentials.
            </summary>
            <param name="user">User name.  Many public ftp allow for this value to 'anonymous'.</param>
            <param name="password">Password.  Anonymous public ftp servers generally require a valid email address for a password.</param>
            <remarks>Use the Close() method to log off and close the connection to the FTP server.</remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.OpenAsyncCompleted"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Open(System.String,System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Reopen"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.Close"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.FxpCopyAsync(System.String,Starksoft.Net.Ftp.FtpClient)">
            <summary>
            Asynchronous File Exchange Protocol (FXP) allows server-to-server transfer which can greatly speed up file transfers.
            </summary>
            <param name="fileName">The name of the file to transfer.</param>
            <param name="destination">The destination FTP server which must be supplied as an open and connected FtpClient object.</param>
            <remarks>
            Both servers must support and have FXP enabled before you can transfer files between two remote servers using FXP.  One FTP server must support PASV mode and the other server must allow PORT commands from a foreign address.  Finally, firewall settings may interfer with the ability of one server to access the other server.
            Starksoft FtpClient will coordinate the FTP negoitaion and necessary PORT and PASV transfer commands.
            </remarks>
            <seealso cref="E:Starksoft.Net.Ftp.FtpClient.FxpCopyAsyncCompleted"/>
            <seealso cref="P:Starksoft.Net.Ftp.FtpClient.FxpTransferTimeout"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.FxpCopy(System.String,Starksoft.Net.Ftp.FtpClient)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Dispose">
            <summary>
            Disposes all FtpClient objects and connections.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Dispose(System.Boolean)">
            <summary>
            Dispose Method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpClient.Finalize">
            <summary>
            Dispose deconstructor.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.CharacterEncoding">
            <summary>
            Gets the FTP character encoding used in transfers.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.FileTransferType">
            <summary>
            Gets or sets the file transfer item.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.ItemParser">
            <summary>
            Gets or sets the the directory item parser to use when parsing directory listing data from the FTP server.
            This parser is used by the GetDirList() and GetDirList(string) methods.  
            </summary>
            <remarks>
            You can create your own custom directory listing parser by creating an object that implements the 
            IFtpItemParser interface.  This is particular useful when parsing exotic file directory listing
            formats from specific FTP servers.
            
            This parser is only used when the LIST command is executed.  You can indicate the type of command
            behavior by setting the DirListingMethod property.  This ItemParser may be used if the DirListingMethod
            property is set to List, ListAl, or Automatic.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.IsLoggingOn">
            <summary>
            Gets or sets logging of file transfers.
            </summary>
            <remarks>
            All data transfer activity can be retrieved from the Log property.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.Log">
            <summary>
            Gets or sets the Stream object used for logging data transfer activity.
            </summary>
            <remarks>
            By default a MemoryStream object is created to log all data transfer activity.  Any 
            Stream object that can be written to may be used in place of the MemoryStream object.
            </remarks>
            <seealso cref="P:Starksoft.Net.Ftp.FtpClient.IsLoggingOn"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.FxpTransferTimeout">
            <summary>
            Gets or sets the timeout value in miliseconds when waiting for an FXP server to server transfer to complete.
            </summary>
            <remarks>By default this timeout value is set to 600000 (10 minutes).  For large FXP file transfers you may need to adjust this number higher.</remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.CurrentDirectory">
            <summary>
            Gets the current directory path without sending having to send a request to the server.
            </summary>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetWorkingDirectory"/>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpClient.DirListingMethod">
            <summary>
            Gets or sets the method how directory and file listing commands will be executed on the FTP server.
            </summary>
            <remarks>
            The enmeration options for the listing method affects how the methods GetDirList(), GetDirListAsText(), GetDirListAsync(), GetDirListDeep(),
            and GetDirListDeepAsync() function.  Different options will result in different commands being executed on the FTP server in order to option
            directory listing information.  The most widely flexible option is the List option which will executed the LIST command on the FTP server 
            and option unstructured or semistructured file and directory information.  The Starksoft FtpClient will then parse that data as and present
            a FtpListCollection that contains FtpListItem objects.  
            
            Some FTP servers will not return detailed listing data with the UNIX file permissions
            either because they do not support them or those FTP servers require an argument to be specified with the LIST command.  That argument is 
            the value '-al' which is a UNIX specific argument to instruct the server to list all the information about the files and not simply the file
            names.  The problem is that not all FTP servers will accept this argument.  To Use the optional argument choose the enumeration option ListAll.
            
            More modern FTP servers implement the a much more structured method to retrieve file and directory listings from a FTP server.  Two new commands 
            were defined in RFC 3659.  Those new commands are MLST and MLSD or MLSx for short.  The MLSx commands instruct the FTP server to send much more
            structured data about the files and directories located on the FTP server.  This helps reduce or eliminate the errors that are common when 
            parsing different type types of directory listing supported by various FTP servers.  Unfortunately, many FTP serves do not support the MLSx
            commands.  
            
            You can specify that this type of command should be used when retrieving a directory listing from a specific FTP server by
            selecting the enumeration option Mlsx.  This option will instruct the Starksoft FtpClient to use the MLSx commands instead of the LIST command
            to retrive directory listing information.  The standard FtpItemCollection will be returned but it will now include objects of class type
            FtpMlsxItem which is a sub-class of the FtpListItem.  The FtpMlsxItem class contains additional information that may be available and supported
            by your FTP server.  Yet, not all FTP servers that support MLSx commands support all the file and directory facts defined by RFC 3659.  Each
            FTP server will support a different range of facts.  In order to support these differences, the FtpMlsxItem class has many nullable data types.
            </remarks>
            <seealso cref="T:Starksoft.Net.Ftp.ListingMethod"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirList(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsText(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeep(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetNameList(System.String)"/>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpClient.GetDirListAsyncCompleted">
            <summary>
            Event handler for GetDirListAsync method.
            </summary>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.GetDirListAsync(System.String)"/>
            <seealso cref="M:Starksoft.Net.Ftp.FtpBase.CancelAsync"/>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpClient.GetDirListDeepAsyncCompleted">
            <summary>
            Event handler for GetDirListDeepAsync method.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpClient.GetFileAsyncCompleted">
            <summary>
            Event that fires when the GetFileAsync method is invoked.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpClient.PutFileAsyncCompleted">
            <summary>
            Asynchronous event for PutFileAsync method.
            </summary>
            <seealso cref="M:Starksoft.Net.Ftp.FtpClient.PutFileAsync(System.String,System.String,Starksoft.Net.Ftp.FileAction)"/>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpClient.OpenAsyncCompleted">
            <summary>
            Event handler for OpenAsync method.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Ftp.FtpClient.FxpCopyAsyncCompleted">
            <summary>
            Asynchronous event for FxpCopyAsync method.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpResponseCollection">
            <summary>
            Ftp response collection.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseCollection.IndexOf(Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire FtpResponseCollection list.
            </summary>
            <param name="item">The FtpResponse object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire if found; otherwise, -1.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseCollection.Add(Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Adds an FtpResponse to the end of the FtpResponseCollection list.
            </summary>
            <param name="item">FtpResponse object to add.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseCollection.Clear">
            <summary>
            Remove all elements from the FtpResponseCollection list.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseCollection.GetRawText">
            <summary>
            Get the raw FTP server supplied reponse text.
            </summary>
            <returns>A string containing the FTP server response.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseCollection.GetLast">
            <summary>
            Get the last server response from the FtpResponseCollection list.
            </summary>
            <returns>FtpResponse object.</returns>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponseCollection.Count">
            <summary>
             Gets the number of elements actually contained in the FtpResponseCollection list.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponseCollection.Item(System.Int32)">
            <summary>
            Gets an FtpResponse from the FtpResponseCollection list based on index value.
            </summary>
            <param name="index">Numeric index of item to retrieve.</param>
            <returns>FtpResponse object.</returns>
        </member>
        <member name="T:Starksoft.Net.Http.HttpDataTransferException">
            <summary>
            This exception is thrown when an error occurs when an unexpected event happens during data transfer.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpDataTransferException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpDataTransferException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpDataTransferException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpDataTransferException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpResponseException">
            <summary>
            This exception is thrown when a file integrity check fails.
            For detailed information about the error, the FTP server response 
            can be inspected via the Reponse property on this exception.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="response">Ftp response object.</param>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Http.HttpResponseCode">
            <summary>
            Http response codes.
            </summary>
            <remarks>
            Informational 1xx.   This class of status code indicates a provisional response, consisting only of the Status-Line and optional headers, and is terminated by an empty line. There are no required headers for this class of status code. Since HTTP/1.0 did not define any 1xx status codes, servers MUST NOT send a 1xx response to an HTTP/1.0 client except under experimental conditions.  A client MUST be prepared to accept one or more 1xx status responses prior to a regular response, even if the client does not expect a 100 (Continue) status message. Unexpected 1xx status responses MAY be ignored by a user agent. 
            Successful 2xx.  This class of status code indicates that the client's request was successfully received, understood, and accepted. 
            Redirection 3xx. This class of status code indicates that further action needs to be taken by the user agent in order to fulfill the request. The action required MAY be carried out by the user agent without interaction with the user if and only if the method used in the second request is GET or HEAD. A client SHOULD detect infinite redirection loops, since such loops generate network traffic for each redirection.  
            Client Error 4xx.  The 4xx class of status code is intended for cases in which the client seems to have erred. Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. These status codes are applicable to any request method. User agents SHOULD display any included entity to the user. 
            ServerError 5xx.  Response status codes beginning with the digit "5" indicate cases in which the server is aware that it has erred or is incapable of performing the request. Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition. User agents SHOULD display any included entity to the user. These response codes are applicable to any request method.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.Continue">
            <summary>
            (100) The client SHOULD continue with its request. This interim response is used to inform the client that the initial part of the request has been received and has not yet been rejected by the server. The client SHOULD continue by sending the remainder of the request or, if the request has already been completed, ignore this response. The server MUST send a final response after the request has been completed. 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.SwitchingProtocols">
            <summary>
            (101) The client SHOULD continue with its request. This interim response is used to inform the client that the initial part of the request has been received and has not yet been rejected by the server. The client SHOULD continue by sending the remainder of the request or, if the request has already been completed, ignore this response. The server MUST send a final response after the request has been completed
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.Processing">
            <summary>
            (102) The server will switch protocols to those defined by the response's Upgrade header field immediately after the empty line which terminates the 101 response. The protocol SHOULD be switched only when it is advantageous to do so. For example, switching to a newer version of HTTP is advantageous over older versions, and switching to a real-time, synchronous protocol might be advantageous when delivering resources that use such features. 
            </summary>
            <remarks>
            WebDAV specific code since a WebDAV request may contina many
            sub-requests involving file operations.  See RFC 2518 for more information.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.Ok">
            <summary>
            (200) The request has succeeded. The information returned with the response is dependent on the method used in the request.
            Send after a GET, HEAD, POST, or TRACE command.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.Created">
            <summary>
            (201) The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field
            </summary>
            <remarks>
            A 201 response MAY contain an ETag response header field indicating the current value of the entity tag for the requested variant just created.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.Accepted">
            <summary>
            (202) The request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place. There is no facility for re-sending a status code from an asynchronous operation such as this. 
            </summary>
            <remarks>
            The 202 response is intentionally non-committal. Its purpose is to allow a server to accept a request for some other process (perhaps a batch-oriented process that is only run once per day) without requiring that the user agent's connection to the server persist until the process is completed. The entity returned with this response SHOULD include an indication of the request's current status and either a pointer to a status monitor or some estimate of when the user can expect the request to be fulfilled.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.NonAuthoritativeInformation">
            <summary>
            (203) The returned metainformation in the entity-header is not the definitive set as available from the origin server, but is gathered from a local or a third-party copy. The set presented MAY be a subset or superset of the original version. For example, including local annotation information about the resource might result in a superset of the metainformation known by the origin server. Use of this response code is not required and is only appropriate when the response would otherwise be 200 (OK).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.NoContent">
            <summary>
            (204) The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant.  
            </summary>
            <remarks>HTTP/1.1 code.</remarks>
            <remarks>The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields. </remarks>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.ResetContent">
            <summary>
            (205) The server has fulfilled the request and the user agent SHOULD reset the document view which caused the request to be sent. This response is primarily intended to allow input for actions to take place via user input, followed by a clearing of the form in which the input is given so that the user can easily initiate another input action. The response MUST NOT include an entity.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.PartialContent">
            <summary>
            (206)  The server has fulfilled the partial GET request for the resource. The request MUST have included a Range header field (section 14.35) indicating the desired range, and MAY have included an If-Range header field (section 14.27) to make the request conditional. 
            </summary>
            <remarks>
            The response MUST include the following header fields: 
            - Either a Content-Range header field (section 14.16) indicating
            the range included with this response, or a multipart/byteranges
            Content-Type including Content-Range fields for each part. If a
            Content-Length header field is present in the response, its
            value MUST match the actual number of OCTETs transmitted in the
            message-body.
            - Date
            - ETag and/or Content-Location, if the header would have been sent
            in a 200 response to the same request
            - Expires, Cache-Control, and/or Vary, if the field-value might
            differ from that sent in any previous response for the same variant
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.MultiStatus">
            <summary>
            (207) The message body that follows is an XML message and can contain a number of separate response codes, depending on how many sub-requests were made.
            </summary>
            <remarks>This is a WebDAV specific code.  See RFC 2518 for more information.</remarks>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.MultipleChoices">
            <summary>
            (300) The requested resource corresponds to any one of a set of representations, each with its own specific location, and agent- driven negotiation information (section 12) is being provided so that the user (or user agent) can select a preferred representation and redirect its request to that location. 
            </summary>
            <remarks>
            Unless it was a HEAD request, the response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content- Type header field. Depending upon the format and the capabilities of 
            the user agent, selection of the most appropriate choice MAY be performed automatically. However, this specification does not define any standard for such automatic selection. 
            If the server has a preferred choice of representation, it SHOULD include the specific URI for that representation in the Location field; user agents MAY use the Location field value for automatic redirection. This response is cacheable unless indicated otherwise. 
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.MovedPermanently">
            <summary>
            (301) The requested resource has been assigned a new permanent URI and any future references to this resource SHOULD use one of the returned URIs. Clients with link editing capabilities ought to automatically re-link references to the Request-URI to one or more of the new references returned by the server, where possible. This response is cacheable unless indicated otherwise. 
            </summary>
            <remarks>
            The new permanent URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s). 
            If the 301 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued. 
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.Found">
            <summary>
            (302) The requested resource resides temporarily under a different URI. Since the redirection might be altered on occasion, the client SHOULD continue to use the Request-URI for future requests. This response is only cacheable if indicated by a Cache-Control or Expires header field. 
            </summary>
            <remarks>
            The temporary URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s). 
            If the 302 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued. 
            Note: RFC 1945 and RFC 2068 specify that the client is not allowed
            to change the method on the redirected request.  However, most
            existing user agent implementations treat 302 as if it were a 303
            response, performing a GET on the Location field-value regardless
            of the original request method. The status codes 303 and 307 have
            been added for servers that wish to make unambiguously clear which
            kind of reaction is expected of the client.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.SeeOther">
            <summary>
            (303) The response to the request can be found under a different URI and SHOULD be retrieved using a GET method on that resource. This method exists primarily to allow the output of a POST-activated script to redirect the user agent to a selected resource. The new URI is not a substitute reference for the originally requested resource. The 303 response MUST NOT be cached, but the response to the second (redirected) request might be cacheable. 
            </summary>
            <remarks>
            HTTP/1.1 code.
            The different URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s). 
            Note: Many pre-HTTP/1.1 user agents do not understand the 303
            status. When interoperability with such clients is a concern, the
            302 status code may be used instead, since most user agents react
            to a 302 response as described here for 303.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.NotModified">
             <summary>
             (305) If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus is always terminated by the first empty line after the header fields. 
             </summary>
             <remarks>
              The response MUST include the following header fields:
                  - Date, unless its omission is required by section 14.18.1
                  If a clockless origin server obeys these rules, and proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], section 14.19), caches will operate correctly.
                  - ETag and/or Content-Location, if the header would have been sent
                  in a 200 response to the same request
                  - Expires, Cache-Control, and/or Vary, if the field-value might
                  differ from that sent in any previous response for the same
                  variant
            If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers.
            If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and repeat the request without the conditional.
            If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect any new field values given in the response. 
             </remarks>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.UseProxy">
            <summary>
            (305) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.Reserved1">
            <summary>
            (306)
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.TemporaryRedirect">
            <summary>
            (307) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.BadRequest">
            <summary>
            (400) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.Unauthorized">
            <summary>
            (401) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.PaymentRequired">
            <summary>
            (402) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.Forbidden">
            <summary>
            (403) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.NotFound">
            <summary>
            (404) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.MethodNotAllowed">
            <summary>
            (405) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.NotAcceptable">
            <summary>
            (406) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.ProxyAuthenticationRequired">
            <summary>
            (407) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.RequestTimeout">
            <summary>
            (408) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.Conflict">
            <summary>
            (409) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.Gone">
            <summary>
            (410) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.LengthRequired">
            <summary>
            (411) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.PreconditionFailed">
            <summary>
            (412) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.RequestEntityTooLarge">
            <summary>
            (413) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.RequestUriTooLong">
            <summary>
            (414) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.UnsupportedMediaType">
            <summary>
            (415) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.RequestedRangeNotSatisfiable">
            <summary>
            (416) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.ExpectationFailed">
            <summary>
            (417) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.InternalServerError">
            <summary>
            (500) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.NotImplemented">
            <summary>
            (501) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.BadGateway">
            <summary>
            (502) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.ServiceUnavailable">
            <summary>
            (503) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.GatewayTimeout">
            <summary>
            (504) 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpResponseCode.HttpVersionNotSupported">
            <summary>
            (505) 
            </summary>
        </member>
        <member name="T:Starksoft.Net.Http.HttpSecurityProtocol">
            <summary>
            Defines the possible versions of HttpSecurityProtocol.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpSecurityProtocol.None">
            <summary>
            No security protocol specified.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpSecurityProtocol.Tls1">
            <summary>
            Specifies Transport Layer Security (TLS) version 1.0 is required to secure communciations.  The TLS protocol is defined in IETF RFC 2246 and supercedes the SSL 3.0 protocol.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpSecurityProtocol.Tls1OrSsl3">
            <summary>
            Specifies Transport Layer Security (TLS) version 1.0. or Secure Socket Layer (SSL) version 3.0 is acceptable to secure communications
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpSecurityProtocol.Ssl3">
            <summary>
            Specifies Secure Socket Layer (SSL) version 3.0 is required to secure communications.  SSL 3.0 has been superseded by the TLS protocol
            and is provided for backward compatibility only
            </summary>
        </member>
        <member name="F:Starksoft.Net.Http.HttpSecurityProtocol.Ssl2">
            <summary>
            Specifies Secure Socket Layer (SSL) version 2.0 is required to secure communications.  SSL 2.0 has been superseded by the TLS protocol
            and is provided for backward compatibility only.  SSL 2.0 has several weaknesses and should only be used with legacy Http server that require it.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpClient.CancelAsync">
            <summary>
            Cancels any asychronous operation that is currently active.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpClient.SendRequest(Starksoft.Net.Http.HttpRequest)">
            <summary>
            Send a Http command request to the server.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpClient.CreateAsyncWorker">
            <summary>
            creates a new async worker object for the async events to use.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpClient.CreateSslStream(System.IO.Stream)">
            <summary>
            Creates an SSL or TLS secured stream.
            </summary>
            <param name="stream">Unsecured stream.</param>
            <returns>Secured stream</returns>
        </member>
        <member name="M:Starksoft.Net.Http.HttpClient.Dispose">
            <summary>
            Disposes all objects and connections.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpClient.Dispose(System.Boolean)">
            <summary>
            Dispose Method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpClient.Finalize">
            <summary>
            Dispose deconstructor.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Http.HttpClient.ServerResponse">
            <summary>
            Server response event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Http.HttpClient.ClientRequest">
            <summary>
            Server request event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Http.HttpClient.TransferProgress">
            <summary>
            Data transfer progress event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Http.HttpClient.TransferComplete">
            <summary>
            Data transfer complete event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Http.HttpClient.ValidateServerCertificate">
            <summary>
            Security certificate authentication event.
            </summary>
        </member>
        <member name="E:Starksoft.Net.Http.HttpClient.ConnectionClosed">
            <summary>
            Connection closed event.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.IsAsyncCanceled">
            <summary>
            Gets a value indicating whether an asynchronous operation is canceled.
            </summary>
            <remarks>Returns true if an asynchronous operation is canceled; otherwise, false.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.IsBusy">
            <summary>
            Gets a value indicating whether an asynchronous operation is running.
            </summary>
            <remarks>Returns true if an asynchronous operation is running; otherwise, false.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.Port">
            <summary>
            Gets or sets the current port number used by the FtpClient to make a connection to the Http server.
            </summary>
            <remarks>
            The default value is '80'.  This setting can only be changed when the 
            connection to the Http server is closed.  And HttpException is thrown if this 
            setting is changed when the Http server connection is open.
            
            Returns an integer representing the port number used to connect to a remote server.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.Host">
            <summary>
            Gets or sets a text value containing the current host used by the FtpClient to make a connection to the Http server.
            </summary>
            <remarks>
            This value may be in the form of either a host name or IP address.
            This setting can only be changed when the 
            connection to the Http server is closed.  And HttpException is thrown if this 
            setting is changed when the Http server connection is open.
            
            Returns a string with either the host name or host ip address.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.SecurityProtocol">
            <summary>
            Gets or sets a value indicating what security protocol such as Secure Sock Layer (SSL) should be used.
            </summary>
            <remarks>
            The default value is 'None'.  This setting can only be changed when the 
            connection to the Http server is closed.  An HttpException is thrown if this 
            setting is changed when the Http server connection is open.
            
            Returns an enumerator specifying the choosen security protocol of either TLS v1.0, SSL v3.0 or SSL v2.0.
            </remarks>
            <seealso cref="P:Starksoft.Net.Http.HttpClient.SecurityCertificates"/>
            <seealso cref="E:Starksoft.Net.Http.HttpClient.ValidateServerCertificate"/>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.SecurityCertificates">
            <summary>
            Get Client certificate collection used when connection with a secured SSL/TSL protocol.  Add your client certificates 
            if required to connect to the remote Http server.
            </summary>
            <remarks>Returns a X509CertificateCollection list contains X.509 security certificates.</remarks>
            <seealso cref="P:Starksoft.Net.Http.HttpClient.SecurityProtocol"/>
            <seealso cref="E:Starksoft.Net.Http.HttpClient.ValidateServerCertificate"/>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.IsCompressionEnabled">
            <summary>
            Gets or sets a value indicating that the client will use compression when uploading and downloading
            data.
            </summary>
            <remarks>
            This value turns on or off the compression algorithm DEFLATE to facility FTP data compression which is compatible with
            Http servers that implement compression via the zLib compression software library.  The default value is 'False'.  
            This setting can only be changed when the system is not busy conducting other operations.  
            
            Returns True if compression is enabled; otherwise False;
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.MaxUploadSpeed">
            <summary>
            Gets or sets an Integer value representing the maximum upload speed allowed 
            for data transfers in kilobytes per second.
            </summary>
            <remarks>
            Set this value when you would like to throttle back any upload data transfers.
            A value of zero means there is no restriction on how fast data uploads are 
            conducted.  The default value is zero.  This setting is used to throttle data traffic so the FtpClient does
            not consume all available network bandwidth.
            </remarks>
            <seealso cref="P:Starksoft.Net.Http.HttpClient.MaxDownloadSpeed"/>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.MaxDownloadSpeed">
            <summary>
            Gets or sets an Integer value representing the maximum download speed allowed 
            for data transfers in kilobytes per second.
            </summary>
            <remarks>
            Set this value when you would like to throttle back any download data transfers.
            A value of zero means there is no restriction on how fast data uploads are 
            conducted.  The default value is zero.  This setting is used to throttle data traffic so the FtpClient does
            not consume all available network bandwidth.
            </remarks>
            <seealso cref="P:Starksoft.Net.Http.HttpClient.MaxUploadSpeed"/>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.TcpBufferSize">
            <summary>
            Gets or sets the TCP buffer size used when communicating with the Http server in bytes.
            </summary>
            <remarks>Returns an integer value representing the buffer size.  The default value is 8192.</remarks>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.TcpTimeout">
            <summary>
            Gets or sets the TCP timeout used when communciating with the Http server in milliseconds.
            </summary>
            <remarks>
            Default value is 30000 (30 seconds).
            </remarks>
            <seealso cref="P:Starksoft.Net.Http.HttpClient.TransferTimeout"/>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.TransferTimeout">
            <summary>
            Gets or sets the data transfer timeout used when communicating with the Http server in milliseconds.
            </summary>
            <remarks>
            Default value is 15000 (15 seconds).
            </remarks>
            <seealso cref="P:Starksoft.Net.Http.HttpClient.TcpTimeout"/>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.Proxy">
             <summary>
             Gets or sets the the proxy object to use when establishing a connection to the remote Http server.
             </summary>
             <remarks>Create a proxy object when traversing a firewall.</remarks>
             <code>
             FtpClient ftp = new FtpClient();
            
             // create an instance of the client proxy factory for the an ftp client
             ftp.Proxy = (new ProxyClientFactory()).CreateProxyClient(ProxyType.Http, "localhost", 6588);
                    
             </code>
             <seealso cref="T:Starksoft.Net.Proxy.ProxyClientFactory"/>
        </member>
        <member name="P:Starksoft.Net.Http.HttpClient.IsConnected">
            <summary>
            Gets the connection status to the Http server.
            </summary>
            <remarks>Returns True if the connection is open; otherwise False.</remarks>
            <seealso cref="E:Starksoft.Net.Http.HttpClient.ConnectionClosed"/>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpResponseEventArgs">
            <summary>
            Event arguments to facilitate the response event from the FTP server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseEventArgs.#ctor(Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="response">FtpResponse object.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponseEventArgs.Response">
            <summary>
            Response object containing response received from the server.
            </summary>
        </member>
        <member name="T:Starksoft.Cryptography.OpenPGP.EncryptAsyncCompletedEventArgs">
            <summary>
            Event arguments class for the EncryptAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.EncryptAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="error">Exception information generated by the event.</param>
            <param name="cancelled">Cancelled event flag.  This flag is set to true if the event was cancelled.</param>
        </member>
        <member name="T:Starksoft.Net.Proxy.ProxyType">
            <summary>
            The type of proxy.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.ProxyType.None">
            <summary>
            No Proxy specified.  Note this option will cause an exception to be thrown if used to create a proxy object by the factory.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.ProxyType.Http">
            <summary>
            HTTP Proxy
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.ProxyType.Socks4">
            <summary>
            SOCKS v4 Proxy
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.ProxyType.Socks4a">
            <summary>
            SOCKS v4a Proxy
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.ProxyType.Socks5">
            <summary>
            SOCKS v5 Proxy
            </summary>
        </member>
        <member name="T:Starksoft.Net.Proxy.ProxyClientFactory">
             <summary>
             Factory class for creating new proxy client objects.
             </summary>
             <remarks>
             <code>
             // create an instance of the client proxy factory
             ProxyClientFactory factory = new ProxyClientFactory();
                    
             // use the proxy client factory to generically specify the type of proxy to create
             // the proxy factory method CreateProxyClient returns an IProxyClient object
             IProxyClient proxy = factory.CreateProxyClient(ProxyType.Http, "localhost", 6588);
            
             // create a connection through the proxy to www.starksoft.com over port 80
             System.Net.Sockets.TcpClient tcpClient = proxy.CreateConnection("www.starksoft.com", 80);
             </code>
             </remarks>
        </member>
        <member name="M:Starksoft.Net.Proxy.ProxyClientFactory.CreateProxyClient(Starksoft.Net.Proxy.ProxyType)">
            <summary>
            Factory method for creating new proxy client objects.
            </summary>
            <param name="type">The type of proxy client to create.</param>
            <returns>Proxy client object.</returns>
        </member>
        <member name="M:Starksoft.Net.Proxy.ProxyClientFactory.CreateProxyClient(Starksoft.Net.Proxy.ProxyType,System.Net.Sockets.TcpClient)">
            <summary>
            Factory method for creating new proxy client objects using an existing TcpClient connection object.
            </summary>
            <param name="type">The type of proxy client to create.</param>
            <param name="tcpClient">Open TcpClient object.</param>
            <returns>Proxy client object.</returns>
        </member>
        <member name="M:Starksoft.Net.Proxy.ProxyClientFactory.CreateProxyClient(Starksoft.Net.Proxy.ProxyType,System.String,System.Int32)">
            <summary>
            Factory method for creating new proxy client objects.  
            </summary>
            <param name="type">The type of proxy client to create.</param>
            <param name="proxyHost">The proxy host or IP address.</param>
            <param name="proxyPort">The proxy port number.</param>
            <returns>Proxy client object.</returns>
        </member>
        <member name="M:Starksoft.Net.Proxy.ProxyClientFactory.CreateProxyClient(Starksoft.Net.Proxy.ProxyType,System.String,System.Int32,System.String,System.String)">
            <summary>
            Factory method for creating new proxy client objects.  
            </summary>
            <param name="type">The type of proxy client to create.</param>
            <param name="proxyHost">The proxy host or IP address.</param>
            <param name="proxyPort">The proxy port number.</param>
            <param name="proxyUsername">The proxy username.  This parameter is only used by Http, Socks4 and Socks5 proxy objects.</param>
            <param name="proxyPassword">The proxy user password.  This parameter is only used Http, Socks5 proxy objects.</param>
            <returns>Proxy client object.</returns>
        </member>
        <member name="M:Starksoft.Net.Proxy.ProxyClientFactory.CreateProxyClient(Starksoft.Net.Proxy.ProxyType,System.Net.Sockets.TcpClient,System.String,System.Int32,System.String,System.String)">
            <summary>
            Factory method for creating new proxy client objects.  
            </summary>
            <param name="type">The type of proxy client to create.</param>
            <param name="tcpClient">Open TcpClient object.</param>
            <param name="proxyHost">The proxy host or IP address.</param>
            <param name="proxyPort">The proxy port number.</param>
            <param name="proxyUsername">The proxy username.  This parameter is only used by Http, Socks4 and Socks5 proxy objects.</param>
            <param name="proxyPassword">The proxy user password.  This parameter is only used Http, Socks5 proxy objects.</param>
            <returns>Proxy client object.</returns>
        </member>
        <member name="T:Starksoft.Net.Http.HttpConnectionBrokenException">
            <summary>
            This exception is thrown when an error occurs when a connection is broken unexpectedly.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpConnectionBrokenException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpConnectionBrokenException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpConnectionBrokenException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpConnectionBrokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.TransferProgressEventArgs">
            <summary>
            Event arguments to facilitate the transfer progress event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.TransferProgressEventArgs.#ctor(System.Int32,System.Int64,System.Int64,System.Int32,System.TimeSpan,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="bytesTransferred">The number of bytes transferred in the last transfer block.</param>
            <param name="totalBytesTransferred">Total number of bytes transferred since transfer began.</param>
            <param name="transferSize">Size of the data transfer.</param>
            <param name="bytesPerSecond">The data transfer speed in bytes per second over the entire duration of the data transfer.</param>
            <param name="elapsedTime">The time that has elapsed since the data transfer started.</param>
            <param name="percentageComplete">The percentage that the transfer has completed.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.BytesTransferred">
            <summary>
            The number of bytes transferred in the last transfer block.  
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.TotalBytesTransferred">
            <summary>
            The total number of bytes transferred for a particular transfer event.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.BytesPerSecond">
            <summary>
            Gets the data transfer speed in bytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.KilobytesPerSecond">
            <summary>
            Gets the data transfer speed in Kilobytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.MegabytesPerSecond">
            <summary>
            Gets the data transfer speed in Megabytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.GigabytesPerSecond">
            <summary>
            Gets the data transfer speed in Gigabytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.ElapsedTime">
            <summary>
            Gets the time that has elapsed since the data transfer started.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.PercentComplete">
            <summary>
            Gets the percentage the transfer is complete if data is available.
            </summary>
            <remarks>
            This data is not available for PutFile() stream transfers that do not support seeking.  This data
            will not be accurately represented when zlib compression is enabled.  This data is not available
            for non-file data transfer events.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.TransferSize">
            <summary>
            Gets the size of the data transfer if data is available.
            </summary>
            <remarks>
            This data is not available for PutFile() stream transfers that do not support seeking.  This data
            will not be accurately represented when zlib compression is enabled.  This data is not available
            for non-file data transfer events.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.BytesRemaining">
            <summary>
            The number of bytes remaining in the transfer.
            </summary>
            <remarks>
            This data is not available for PutFile() stream transfers that do not support seeking.  This data
            will not be accurately represented when zlib compression is enabled.  This data is not available
            for non-file data transfer events.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferProgressEventArgs.TimeRemaining">
            <summary>
            Gets the estimated time that remains for the data transfer.
            </summary>
            <remarks>
            This data is not available for PutFile() stream transfers that do not support seeking.  This data
            will not be accurately represented when zlib compression is enabled.  This data is not available
            for non-file data transfer events.
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.FxpCopyAsyncCompletedEventArgs">
            <summary>
            Provides data for the OpenAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FxpCopyAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
             Initializes a new instance of the FxpCopyAsyncCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpRequestEventArgs">
            <summary>
            Event arguments to facilitate the FtpClient request event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpRequestEventArgs.#ctor(Starksoft.Net.Ftp.FtpRequest)">
            <summary>
            Constructor for FtpRequestEventArgs.
            </summary>
            <param name="request">An FtpRequest object.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpRequestEventArgs.Request">
            <summary>
            Client request command text sent from the client to the server.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpFeatureException">
            <summary>
            This exception is thrown when an error occurs during the Ftp Feature parsing.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpConnectionClosedException">
            <summary>
            This exception is thrown when an error occurs during the FTP connection is closed while attempting to transmit data.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionClosedException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionClosedException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionClosedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionClosedException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionClosedException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpItemCollection">
            <summary>
            Ftp item list.
            </summary>
            <exception cref="T:Starksoft.Net.Ftp.FtpFeatureException"></exception>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.#ctor">
            <summary>
            Default constructor for FtpItemCollection.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.#ctor(System.String,System.String,Starksoft.Net.Ftp.IFtpItemParser)">
            <summary>
            Split a multi-line file list text response and add the parsed items to the collection.
            </summary>
            <param name="path">Path to the item on the FTP server.</param>
            <param name="fileList">The multi-line file list text from the FTP server.</param>
            <param name="itemParser">Line item parser object used to parse each line of fileList data.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.Merge(Starksoft.Net.Ftp.FtpItemCollection)">
            <summary>
            Merges two FtpItemCollection together into a single collection.
            </summary>
            <param name="items">Collection to merge with.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.ToDataTable">
            <summary>
            Convert current FtpCollection to a DataTable object.
            </summary>
            <returns>Data table object.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.IndexOf(Starksoft.Net.Ftp.FtpItem)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire FtpItemCollection list.
            </summary>
            <param name="item">The FtpItem to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire if found; otherwise, -1.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.Add(Starksoft.Net.Ftp.FtpItem)">
            <summary>
            Adds an FtpItem to the end of the FtpItemCollection list.
            </summary>
            <param name="item">FtpItem object to add.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemCollection.Contains(System.String)">
            <summary>
            Linearly searches for the specified object based on the 'name' parameter value
            and returns true if an object with the name is found; otherwise false.
            </summary>
            <param name="name">The name of the FtpItem to locate in the collection.</param>
            <returns>True if the name if found; otherwise false.</returns>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItemCollection.TotalSize">
            <summary>
            Gets the size, in bytes, of all files in the collection as reported by the FTP server.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItemCollection.Count">
            <summary>
             Gets the number of elements actually contained in the FtpItemCollection list.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItemCollection.Item(System.Int32)">
            <summary>
            Gets an FtpItem from the FtpItemCollection based on index value.
            </summary>
            <param name="index">Numeric index of item to retrieve.</param>
            <returns>FtpItem</returns>
        </member>
        <member name="T:Starksoft.Net.Http.HttpCookieCollection">
            <summary>
            Http cookie collection.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpCookieCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpCookieCollection.IndexOf(Starksoft.Net.Http.HttpCookie)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire WebCookieCollection list.
            </summary>
            <param name="item">The WebCookie object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire if found; otherwise, -1.</returns>
        </member>
        <member name="M:Starksoft.Net.Http.HttpCookieCollection.Add(Starksoft.Net.Http.HttpCookie)">
            <summary>
            Adds an WebCookie to the end of the WebCookieCollection list.
            </summary>
            <param name="item">WebCookie object to add.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpCookieCollection.Clear">
            <summary>
            Remove all elements from the WebCookieCollection list.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.HttpCookieCollection.Count">
            <summary>
             Gets the number of elements actually contained in the WebCookieCollection list.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.HttpCookieCollection.Item(System.Int32)">
            <summary>
            Gets an WebCookie from the WebCookieCollection list based on index value.
            </summary>
            <param name="index">Numeric index of item to retrieve.</param>
            <returns>WebCookie object.</returns>
        </member>
        <member name="T:Starksoft.Net.Http.HttpCertificateValidationException">
            <summary>
            This exception is thrown when an error occurs when a secure connection
            has a certificate validation failure.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpCertificateValidationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpCertificateValidationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpCertificateValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpCertificateValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpHashingException">
            <summary>
            This exception is thrown when a file hashing function or logic fails.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpNetworkVersionException">
            <summary>
            This exception is thrown when an error in the network versioning is encountered.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpNetworkVersionException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpNetworkVersionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpNetworkVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpNetworkVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpNetworkVersionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpNetworkVersionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpConnectionOpenException">
            <summary>
            This exception is thrown when an error occurs while attempt to open a command connection
            to the FTP server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionOpenException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionOpenException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionOpenException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionOpenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionOpenException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionOpenException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Cryptography.OpenPGP.GnuPGException">
            <summary>
            This exception is thrown when a general, unexpected error condition occurs when running the GPG.EXE program.   
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpLoginException">
            <summary>
            This exception is thrown when an error occurs during the FTP login process.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpLoginException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpLoginException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpLoginException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpLoginException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpLoginException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpLoginException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpDataTransferException">
            <summary>
            This exception is thrown when a data transfer fails.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataTransferException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataTransferException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataTransferException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataTransferException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataTransferException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataTransferException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException">
            <summary>
            This exception is thrown when the server fails to respond to an FTP data connection in a timely manner.
            The waiting time can be adjusted by specifing a different value for the TransferTimeout property.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpDataConnectionException">
            <summary>
            This exception is thrown when the FTP client is unable to establish a data connection with the FTP server.
            Data connection are temporary, secondary connnections used to transfer files and other types of data between the
            FTP client and the FTP server.  The method in which data connections are established is determined by the type
            of data transfer mode specified when connection to an FTP server (e.g. Passive, Active)
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpDataConnectionTimeoutException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="F:Starksoft.Cryptography.Crc32.DefaultPolynomial">
            <summary>
            
            </summary>
        </member>
        <member name="F:Starksoft.Cryptography.Crc32.DefaultSeed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.Crc32.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.Crc32.#ctor(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="polynomial"></param>
            <param name="seed"></param>
        </member>
        <member name="M:Starksoft.Cryptography.Crc32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:Starksoft.Cryptography.Crc32.HashFinal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starksoft.Cryptography.Crc32.Compute(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Starksoft.Cryptography.Crc32.Compute(System.UInt32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="seed"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Starksoft.Cryptography.Crc32.Compute(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="polynomial"></param>
            <param name="seed"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="P:Starksoft.Cryptography.Crc32.HashSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:Starksoft.Net.Proxy.ProxyException">
            <summary>
            This exception is thrown when a general, unexpected proxy error.   
            </summary>
        </member>
        <member name="M:Starksoft.Net.Proxy.ProxyException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Proxy.ProxyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.ProxyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.ProxyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Http.HttpConnectionOpenException">
            <summary>
            This exception is thrown when an error occurs when a connection is broken unexpectedly during the open 
            connection process.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpConnectionOpenException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpConnectionOpenException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpConnectionOpenException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpConnectionOpenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.TransferCompleteEventArgs">
            <summary>
            Event arguments to facilitate the transfer complete event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.TransferCompleteEventArgs.#ctor(System.Int64,System.Int32,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
            <param name="bytesTransferred">The total number of bytes transferred.</param>
            <param name="bytesPerSecond">The data transfer speed in bytes per second.</param>
            <param name="elapsedTime">The time that has elapsed since the data transfer started.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferCompleteEventArgs.BytesTransferred">
            <summary>
            The total number of bytes transferred.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferCompleteEventArgs.BytesPerSecond">
            <summary>
            Gets the data transfer speed in bytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferCompleteEventArgs.KilobytesPerSecond">
            <summary>
            Gets the data transfer speed in kilobytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.TransferCompleteEventArgs.ElapsedTime">
            <summary>
            Gets the time that has elapsed since the data transfer started.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpListItemParser">
            <summary>
            Generic ftp file and directory LIST listing parser that supports most Unix, Dos, and Windows style FTP 
            directory listings.  A custom parser can be created using the IFtpItemParser interface in the event
            this parser does not suit the needs of a specific FTP server directory format listing.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpListItemParser.ParseLine(System.String)">
            <summary>
            Method to parse a line of file listing data from the FTP server.
            </summary>
            <param name="line">Line to parse.</param>
            <returns>Object representing data in parsed file listing line.</returns>
        </member>
        <member name="T:Starksoft.Net.Proxy.Socks5ProxyClient">
            <summary>
            Socks5 connection proxy class.  This class implements the Socks5 standard proxy protocol.
            </summary>
            <remarks>
            This implementation supports TCP proxy connections with a Socks v5 server.
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks5ProxyClient.#ctor">
            <summary>
            Create a Socks5 proxy client object. 
            </summary>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks5ProxyClient.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Creates a Socks5 proxy client object using the supplied TcpClient object connection.
            </summary>
            <param name="tcpClient">A TcpClient connection object.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks5ProxyClient.#ctor(System.String)">
            <summary>
            Create a Socks5 proxy client object.  The default proxy port 1080 is used.
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks5ProxyClient.#ctor(System.String,System.Int32)">
            <summary>
            Create a Socks5 proxy client object.
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
            <param name="proxyPort">Port used to connect to proxy server.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks5ProxyClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a Socks5 proxy client object.  The default proxy port 1080 is used.
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
            <param name="proxyUserName">Proxy authentication user name.</param>
            <param name="proxyPassword">Proxy authentication password.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks5ProxyClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Create a Socks5 proxy client object.  
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
            <param name="proxyPort">Port used to connect to proxy server.</param>
            <param name="proxyUserName">Proxy authentication user name.</param>
            <param name="proxyPassword">Proxy authentication password.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks5ProxyClient.CreateConnection(System.String,System.Int32)">
            <summary>
            Creates a remote TCP connection through a proxy server to the destination host on the destination port.
            </summary>
            <param name="destinationHost">Destination host name or IP address of the destination server.</param>
            <param name="destinationPort">Port number to connect to on the destination host.</param>
            <returns>
            Returns an open TcpClient object that can be used normally to communicate
            with the destination server
            </returns>
            <remarks>
            This method creates a connection to the proxy server and instructs the proxy server
            to make a pass through connection to the specified destination host on the specified
            port.  
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks5ProxyClient.CancelAsync">
            <summary>
            Cancels any asychronous operation that is currently active.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks5ProxyClient.CreateConnectionAsync(System.String,System.Int32)">
            <summary>
            Asynchronously creates a remote TCP connection through a proxy server to the destination host on the destination port.
            </summary>
            <param name="destinationHost">Destination host name or IP address.</param>
            <param name="destinationPort">Port number to connect to on the destination host.</param>
            <returns>
            Returns TcpClient object that can be used normally to communicate
            with the destination server.
            </returns>
            <remarks>
            This method instructs the proxy server
            to make a pass through connection to the specified destination host on the specified
            port.  
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks5ProxyClient.ProxyHost">
            <summary>
            Gets or sets host name or IP address of the proxy server.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks5ProxyClient.ProxyPort">
            <summary>
            Gets or sets port used to connect to proxy server.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks5ProxyClient.ProxyName">
            <summary>
            Gets String representing the name of the proxy. 
            </summary>
            <remarks>This property will always return the value 'SOCKS5'</remarks>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks5ProxyClient.ProxyUserName">
            <summary>
            Gets or sets proxy authentication user name.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks5ProxyClient.ProxyPassword">
            <summary>
            Gets or sets proxy authentication password.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks5ProxyClient.TcpClient">
            <summary>
            Gets or sets the TcpClient object. 
            This property can be set prior to executing CreateConnection to use an existing TcpClient connection.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks5ProxyClient.IsBusy">
            <summary>
            Gets a value indicating whether an asynchronous operation is running.
            </summary>
            <remarks>Returns true if an asynchronous operation is running; otherwise, false.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks5ProxyClient.IsAsyncCancelled">
            <summary>
            Gets a value indicating whether an asynchronous operation is cancelled.
            </summary>
            <remarks>Returns true if an asynchronous operation is cancelled; otherwise, false.
            </remarks>
        </member>
        <member name="E:Starksoft.Net.Proxy.Socks5ProxyClient.CreateConnectionAsyncCompleted">
            <summary>
            Event handler for CreateConnectionAsync method completed.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Proxy.Socks5ProxyClient.SocksAuthentication">
            <summary>
            Authentication itemType.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.Socks5ProxyClient.SocksAuthentication.None">
            <summary>
            No authentication used.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Proxy.Socks5ProxyClient.SocksAuthentication.UsernamePassword">
            <summary>
            Username and password authentication.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Proxy.Socks4aProxyClient">
            <summary>
            Socks4a connection proxy class.  This class implements the Socks4a standard proxy protocol
            which is an extension of the Socks4 protocol 
            </summary>
            <remarks>
            In Socks version 4A if the client cannot resolve the destination host's domain name 
            to find its IP address the server will attempt to resolve it.  
            </remarks>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4aProxyClient.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4aProxyClient.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Creates a Socks4 proxy client object using the supplied TcpClient object connection.
            </summary>
            <param name="tcpClient">An open TcpClient object with an established connection.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4aProxyClient.#ctor(System.String,System.String)">
            <summary>
            Create a Socks4a proxy client object.  The default proxy port 1080 is used.
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
            <param name="proxyUserId">Proxy user identification information for an IDENTD server.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4aProxyClient.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a Socks4a proxy client object.
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
            <param name="proxyPort">Port used to connect to proxy server.</param>
            <param name="proxyUserId">Proxy user identification information.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4aProxyClient.#ctor(System.String)">
            <summary>
            Create a Socks4 proxy client object.  The default proxy port 1080 is used.
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4aProxyClient.#ctor(System.String,System.Int32)">
            <summary>
            Create a Socks4a proxy client object.
            </summary>
            <param name="proxyHost">Host name or IP address of the proxy server.</param>
            <param name="proxyPort">Port used to connect to proxy server.</param>
        </member>
        <member name="M:Starksoft.Net.Proxy.Socks4aProxyClient.SendCommand(System.Net.Sockets.NetworkStream,System.Byte,System.String,System.Int32,System.String)">
            <summary>
            Sends a command to the proxy server.
            </summary>
            <param name="proxy">Proxy server data stream.</param>
            <param name="command">Proxy byte command to execute.</param>
            <param name="destinationHost">Destination host name or IP address.</param>
            <param name="destinationPort">Destination port number</param>
            <param name="userId">IDENTD user ID value.</param>
            <remarks>
            This method override the SendCommand message in the Sock4ProxyClient object.  The override adds support for the
            Socks4a extensions which allow the proxy client to optionally command the proxy server to resolve the 
            destination host IP address. 
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Proxy.Socks4aProxyClient.ProxyName">
            <summary>
            Gets String representing the name of the proxy. 
            </summary>
            <remarks>This property will always return the value 'SOCKS4a'</remarks>
        </member>
        <member name="T:Starksoft.Net.Http.OpenAsyncCompletedEventArgs">
            <summary>
            Provides data for the OpenAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.OpenAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
             Initializes a new instance of the OpenAsyncCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="T:Starksoft.Net.Http.HttpSecureConnectionException">
            <summary>
            This exception is thrown when an error occurs when a secure connection is broken unexpectedly.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpSecureConnectionException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpSecureConnectionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpSecureConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpSecureConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.MlsxPerm">
            <summary>
            The MLSx perm options as defined by RFC 3659.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.MlsxPerm.None">
            <summary>
            No permissions specified.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.MlsxPerm.CanAppendFile">
            <summary>
            Indicates the file can be appended to.
            </summary>
            <remarks>
            The "a" permission applies to objects of type=file, and indicates
            that the APPE (append) command may be applied to the file named.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.MlsxPerm.CanCreateFile">
            <summary>
            Indicates the directory allow files to be created.
            </summary>
            <remarks>
            The "c" permission applies to objects of type=dir (and type=pdir,
            type=cdir).  It indicates that files may be created in the directory
            named.  That is, that a STOU command is likely to succeed, and that
            STOR and APPE commands might succeed if the file named did not
            previously exist, but is to be created in the directory object that
            has the "c" permission.  It also indicates that the RNTO command is
            likely to succeed for names in the directory.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.MlsxPerm.CanDeleteFile">
            <summary>
            Indicates the directory or file can be deleted.
            </summary>
            <remarks>
            The "d" permission applies to all types.  It indicates that the
            object named may be deleted, that is, that the RMD command may be
            applied to it if it is a directory, and otherwise that the DELE
            command may be applied to it.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.MlsxPerm.CanChangeDirectory">
            <summary>
            Indicates the change directory command can be executed sucessfully.
            </summary>
            <remarks>
            The "e" permission applies to the directory types.  When set on an
            object of type=dir, type=cdir, or type=pdir it indicates that a CWD
            command naming the object should succeed, and the user should be able
            to enter the directory named.  For type=pdir it also indicates that
            the CDUP command may succeed (if this particular pathname is the one
            to which a CDUP would apply.) 
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.MlsxPerm.CanRename">
            <summary>
            Indicates the directory for file can be renamed.
            </summary>
            <remarks>
            The "f" permission for objects indicates that the object named may be
            renamed - that is, may be the object of an RNFR command.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.MlsxPerm.CanListFiles">
            <summary>
            Indicates the files for the directory can be listed.
            </summary>
            <remarks>
            The "l" permission applies to the directory file types, and indicates
            that the listing commands, LIST, NLST, and MLSD may be applied to the
            directory in question.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.MlsxPerm.CanCreateDirectory">
            <summary>
            Indicates directories in this directory may be created.
            </summary>
            <remarks>
            The "m" permission applies to directory types, and indicates that the
            MKD command may be used to create a new directory within the
            directory under consideration.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.MlsxPerm.CanDeleteDirectory">
            <summary>
            Indicates objects in this directory may be deleted.
            </summary>
            <remarks>
            The "p" permission applies to directory types, and indicates that
            objects in the directory may be deleted, or (stretching naming a
            little) that the directory may be purged.  Note: it does not indicate
            that the RMD command may be used to remove the directory named
            itself, the "d" permission indicator indicates that.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.MlsxPerm.CanRetrieveFile">
            <summary>
            Indicates files in this directory may be retrieved.
            </summary>
            <remarks>
            The "r" permission applies to type=file objects, and for some
            systems, perhaps to other types of objects, and indicates that the
            RETR command may be applied to that object.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.MlsxPerm.CanStoreFile">
            <summary>
            Indicates files in this directory may be stored.
            </summary>
            <remarks>
            The "w" permission applies to type=file objects, and for some
            systems, perhaps to other types of objects, and indicates that the
            STOR command may be applied to the object named.
            Note: That a permission indicator is set can never imply that the
            appropriate command is guaranteed to work
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpMlsxItem">
            <summary>
            FTP MLSx item class.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpItem">
            <summary>
            Base class for the FTP item.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItem.#ctor(System.String,System.Nullable{System.DateTime},System.Int64,Starksoft.Net.Ftp.FtpItemType,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Constructor to create a new ftp item.
            </summary>
            <param name="name">Name of the item.</param>
            <param name="modified">Modified date and/or time of the item.</param>
            <param name="size">Number of bytes or size of the item.</param>
            <param name="itemType">Type of the item.</param>
            <param name="attributes">UNIX style permission attribute text for item.</param>
            <param name="mode">UNIX style mode permission integer value.</param>
            <param name="symbolicLink">UNIX style symbolic linked file name .</param>
            <param name="rawText">The raw text of the item.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItem.SetParentPath(System.String)">
            <summary>
            Internal method to set the parent path value.
            </summary>
            <param name="path">Parent path.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItem.Clone">
            <summary>
            Clone the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItem.ToString">
            <summary>
            Gets the item base properties as string.
            </summary>
            <returns>String object.</returns>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.RawText">
            <summary>
            Gets the raw text line for the item.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.ParentPath">
            <summary>
            Gets the parent path for the item.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.Name">
            <summary>
            Gets the name of the item.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.Size">
            <summary>
            Gets the size of the file or directory.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.Modified">
            <summary>
            Gets the last modification date and time.  Adjusted to from UTC (GMT) to local time.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.ItemType">
            <summary>
            Gets the item type.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.Attributes">
            <summary>
            UNIX style permissions text for the item.  
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.Mode">
            <summary>
            UNIX style mode permission integer value for the item.  
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.SymbolicLink">
            <summary>
            The symbolic link name if the item is of itemType symbolic link.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpItem.FullPath">
            <summary>
            Item full path.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpMlsxItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpMlsxItem.#ctor(System.String,System.Nullable{System.DateTime},System.Int64,Starksoft.Net.Ftp.FtpItemType,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.String,Starksoft.Net.Ftp.MlsxPerm,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Constructor to create a new ftp item.
            </summary>
            <param name="name">Name of the item.</param>
            <param name="modified">Modified date and/or time of the item.</param>
            <param name="size">Number of bytes or size of the item.</param>
            <param name="itemType">Type of the item.</param>
            <param name="attributes">UNIX style attributes value.</param>
            <param name="mode">UNIX style mode value</param>
            <param name="rawText">The raw text of the item.</param>
            <param name="created">Created date.</param>
            <param name="uniqueId">Unique identifier.</param>
            <param name="permissions">File action permissions.</param>
            <param name="language">File language.</param>
            <param name="mediaType">MIME file type.</param>
            <param name="characterSet">Character set of the file.</param>
            <param name="group">UNIX style group value.</param>
            <param name="owner">UNIX style owner value.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpMlsxItem.Clone">
            <summary>
            Creates a clone of the item object.
            </summary>
            <returns>Returns a FtpMlsxItem clone.</returns>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpMlsxItem.ToString">
            <summary>
            Get the string representation of the FtpMlsxItem.
            </summary>
            <returns>String containing FtpMlsxItem information.</returns>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpMlsxItem.Created">
            <summary>
            Gets the creation date and time.  Adjusted to from UTC (GMT) to local time.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpMlsxItem.UniqueId">
            <summary>
            Gets the unique id of the file or directory.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpMlsxItem.Permissions">
            <summary>
            Gets the enumerated file permissions allowed for the currently logged in user.
            </summary>
            <remarks>
            Permissions are based on FTP server implementation and are represented as
            a flag based enumeration.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpMlsxItem.Language">
            <summary>
            Gets the language of the file per the IANA registry.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpMlsxItem.MediaType">
            <summary>
            Gets MIME media-type of teh file contents per the IANA registry.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpMlsxItem.CharacterSet">
            <summary>
            Gets the character set per the IANA registry if not UTF-8.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpMlsxItem.Group">
            <summary>
            Gets the UNIX specific extension Group integer value for the item.  
            </summary>
            <remarks>
            The UNIX.group fact extension value is not defined by RFC documents and are
            implemented by convention only.  Not all FTP servers will provide the 
            UNIX.* facts.  This value is a nullable field and will be null if no
            fact name was found.
            </remarks>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpMlsxItem.Owner">
            <summary>
            Gets the UNIX specific extension Owner integer value for the item.
            </summary>
            <remarks>
            The UNIX.owner fact extension value is not defined by RFC documents and are
            implemented by convention only.  Not all FTP servers will provide the 
            UNIX.* facts.  This value is a nullable field and will be null if no
            fact name was found.
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpConnectionBrokenException">
            <summary>
            This exception is thrown when a ftp connection is broken and fails.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionBrokenException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionBrokenException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionBrokenException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionBrokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionBrokenException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpConnectionBrokenException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.ConnectionClosedEventArgs">
            <summary>
            Event arguments to facilitate the response event from the FTP server.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.ConnectionClosedEventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Proxy.CreateConnectionAsyncCompletedEventArgs">
            <summary>
            Event arguments class for the EncryptAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Proxy.CreateConnectionAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Net.Sockets.TcpClient)">
            <summary>
            Constructor.
            </summary>
            <param name="error">Exception information generated by the event.</param>
            <param name="cancelled">Cancelled event flag.  This flag is set to true if the event was cancelled.</param>
            <param name="proxyConnection">Proxy Connection.  The initialized and open TcpClient proxy connection.</param>
        </member>
        <member name="P:Starksoft.Net.Proxy.CreateConnectionAsyncCompletedEventArgs.ProxyConnection">
            <summary>
            The proxy connection.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Http.HttpAuthorization">
            <summary>
            Summary description for WebAuthorization.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.PutFileAsyncCompletedEventArgs">
            <summary>
            Provides data for the PutFileAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.PutFileAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
             Initializes a new instance of the PutFileAsyncCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpCommandNotSupportedException">
            <summary>
            This exception is thrown when attempting to executed a command this is not listed
            in the FTP server features.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandNotSupportedException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandNotSupportedException.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="command">FTP command.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandNotSupportedException.#ctor(System.String,Starksoft.Net.Ftp.FtpCmd)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="command">Enumerated FTP command.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandNotSupportedException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpCommandNotSupportedException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Http.ValidateServerCertificateEventArgs">
            <summary>
            Event arguments to facilitate the FtpClient transfer progress and complete events.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.ValidateServerCertificateEventArgs.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            ValidateServerCertificateEventArgs constructor.
            </summary>
            <param name="certificate">X.509 certificate object.</param>
            <param name="chain">X.509 certificate chain.</param>
            <param name="policyErrors">SSL policy errors.</param>
        </member>
        <member name="P:Starksoft.Net.Http.ValidateServerCertificateEventArgs.Certificate">
            <summary>
            The X.509 version 3 server certificate.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.ValidateServerCertificateEventArgs.Chain">
            <summary>
            Server chain building engine for server certificate.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.ValidateServerCertificateEventArgs.PolicyErrors">
            <summary>
            Enumeration representing SSL (Secure Socket Layer) errors.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.ValidateServerCertificateEventArgs.IsCertificateValid">
            <summary>
            Boolean value indicating if the server certificate is valid and can
            be accepted by the FtpClient object.
            </summary>
            <remarks>
            Default value is false which results in certificate being rejected and the SSL
            connection abandoned.  Set this value to true to accept the server certificate 
            otherwise the SSL connection will be closed.
            </remarks>
        </member>
        <member name="T:Starksoft.Cryptography.OpenPGP.GnuPGKeyCollection">
            <summary>
            Collection of PGP keys stored in the GnuPGP application.
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGKeyCollection.#ctor(System.IO.StreamReader)">
            <summary>
            Constructor.
            </summary>
            <param name="keys">StreamReader object containing GnuPG raw key stream data.</param>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGKeyCollection.IndexOf(Starksoft.Cryptography.OpenPGP.GnuPGKey)">
            <summary>
             Searches for the specified GnuPGKey object and returns the zero-based index of the
             first occurrence within the entire GnuPGKeyCollection colleciton.
            </summary>
            <param name="item">The GnuPGKeyobject to locate in the GnuPGKeyCollection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire GnuPGKeyCollection, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGKeyCollection.GetKey(System.Int32)">
            <summary>
             Retrieves the specified GnuPGKey object by zero-based index from the GnuPGKeyCollection.        
            </summary>
            <param name="index">Zero-based index integer value.</param>
            <returns>The GnuPGKey object corresponding to the index position.</returns>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGKeyCollection.AddKey(Starksoft.Cryptography.OpenPGP.GnuPGKey)">
            <summary>
            Adds a GnuPGKey object to the end of the GnuPGKeyCollection.
            </summary>
            <param name="item">GnuPGKey item to add to the GnuPGKeyCollection.</param>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGKeyCollection.ToDataTable">
            <summary>
            Convert current GnuPGKeyCollection to a DataTable object to make data binding a minpulation of key data easier.
            </summary>
            <returns>Data table object.</returns>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPGKeyCollection.Raw">
            <summary>
            Raw key stream text data.
            </summary>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPGKeyCollection.Count">
            <summary>
            Gets the number of elements actually contained in the GnuPGKeyCollection.
            </summary>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPGKeyCollection.Item(System.Int32)">
            <summary>
            Indexer for the GnuPGKeyCollection collection.
            </summary>
            <param name="index">Zero-based index value.</param>
            <returns></returns>
        </member>
        <member name="T:Starksoft.Net.Http.HttpRequestEventArgs">
            <summary>
            Event arguments to facilitate the FtpClient request event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpRequestEventArgs.#ctor(Starksoft.Net.Http.HttpRequest)">
            <summary>
            Constructor.
            </summary>
            <param name="request">An HttpRequest object.</param>
        </member>
        <member name="P:Starksoft.Net.Http.HttpRequestEventArgs.Request">
            <summary>
            Client request command text sent from the client to the server.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpItemType">
            <summary>
            The type of item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.None">
            <summary>
            No item type specified.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.Directory">
            <summary>
            Directory item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.File">
            <summary>
            File item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.SymbolicLink">
            <summary>
            Symbolic link item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.BlockSpecialFile">
            <summary>
            Block special file item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.CharacterSpecialFile">
            <summary>
            Character special file item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.NamedSocket">
            <summary>
            Name socket item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.DomainSocket">
            <summary>
            Domain socket item.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.CurrentDirectory">
            <summary>
            Pathname of the directory whose contents are listed. 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.ParentDirectory">
            <summary>
            Parent directory. 
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpItemType.Other">
            <summary>
            Other item type.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpFeature">
            <summary>
            Ftp feature item class.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeature.#ctor(System.String,System.String)">
            <summary>
            Constructor to create a new ftp feature.
            </summary>
            <param name="name">Feature name (required).</param>
            <param name="arguments">Argument list (can empty).</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpFeature.Name">
            <summary>
            Feature name.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpFeature.Arguments">
            <summary>
            Get the FTP feature arguments collection.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpItemParsingException">
            <summary>
            This exception is thrown when an error occurs during the Ftp item parsing.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemParsingException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemParsingException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemParsingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemParsingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemParsingException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpItemParsingException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpHashingServerBusyException">
            <summary>
            This exception is thrown when a server side file hashing algorithm requested is invalid.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingServerBusyException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingServerBusyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingServerBusyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingServerBusyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingServerBusyException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingServerBusyException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Cryptography.OpenPGP.GnuPGKey">
            <summary>
            Class structure that proves a read-only view of the GnuPG keys. 
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGKey.#ctor(System.String)">
            <summary>
            GnuPGKey constructor.
            </summary>
            <param name="raw">Raw output stream text data containing key information.</param>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPGKey.Key">
            <summary>
            Key text information.
            </summary>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPGKey.KeyExpiration">
            <summary>
            Key expiration date and time.
            </summary>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPGKey.UserId">
            <summary>
            Key user identification.
            </summary>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPGKey.UserName">
            <summary>
            Key user name.
            </summary>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPGKey.SubKey">
            <summary>
            Sub-key information.
            </summary>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPGKey.SubKeyExpiration">
            <summary>
            Sub-key expiration data and time.
            </summary>
        </member>
        <member name="P:Starksoft.Cryptography.OpenPGP.GnuPGKey.Raw">
            <summary>
            Raw output key text generated by GPG.EXE.
            </summary>
        </member>
        <member name="T:Starksoft.Cryptography.OpenPGP.GnuPGBadPassphraseException">
            <summary>
            This exception is thrown when a bad passphrase is given resulting in an error condition when running the GPG.EXE program.   
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGBadPassphraseException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGBadPassphraseException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGBadPassphraseException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Cryptography.OpenPGP.GnuPGBadPassphraseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.OpenAsyncCompletedEventArgs">
            <summary>
            Provides data for the OpenAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.OpenAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean)">
            <summary>
             Initializes a new instance of the OpenAsyncCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpFeatureArgument">
            <summary>
            Ftp feature argument item class.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpFeatureArgument.#ctor(System.String)">
            <summary>
            Constructor to create a new ftp feature.
            </summary>
            <param name="name">Feature name.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpFeatureArgument.Name">
            <summary>
            Feature name.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpFeatureArgument.IsDefault">
            <summary>
            Default value indicator. 
            </summary>
            <remarks>Some feature arguments may be marked as a default argument by the FTP server.</remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpHashingInvalidAlgorithmException">
            <summary>
            This exception is thrown when a server side file hashing algorithm requested is invalid.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingInvalidAlgorithmException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingInvalidAlgorithmException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingInvalidAlgorithmException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingInvalidAlgorithmException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingInvalidAlgorithmException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpHashingInvalidAlgorithmException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpBusyException">
            <summary>
            This exception is thrown when a property or method is invoked and the FtpClient
            is busy executing background processes.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBusyException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBusyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="methodName">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBusyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBusyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBusyException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpBusyException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpAuthenticationException">
            <summary>
            This exception is thrown when an error occurs during the FTP authentication process.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAuthenticationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAuthenticationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAuthenticationException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAuthenticationException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpAsynchronousOperationException">
            <summary>
            This exception is thrown when an asynchronous operation fails or is cancelled.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAsynchronousOperationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAsynchronousOperationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAsynchronousOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAsynchronousOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAsynchronousOperationException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpAsynchronousOperationException.#ctor(System.String,Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="response">Ftp response object.</param>
        </member>
        <member name="T:Starksoft.Tests.TestFtpClient">
            <summary>
            Test fixture for Starksoft.Net.FtpClient.
            </summary>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestOpen(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String)">
            <summary>
            Test the FtpClient
            </summary>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestMultiOpen(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String,System.Int32)">
            <summary>
            Open multiple, simultaneous connections to FTP servers.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
            <param name="connections"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestRepeatedOpen(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String,System.Int32)">
            <summary>
            Open multiple connections to local FTP server to test reliability.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
            <param name="connections"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestOpenUsing(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String)">
            <summary>
            Test the open using command.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestAbort(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String)">
            <summary>
            Test the ABORt command.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestAllocateStorage(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String)">
            <summary>
            Test the ALLOcate Storage command.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestGetSystemType(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String)">
            <summary>
            Test the SYSTem command.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestPutFileUnique1(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String)">
            <summary>
            Test the STORe command.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestPutFileUnique2(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String)">
            <summary>
            Test the STORe command.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestPutFileCreate(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String,System.Int32)">
            <summary>
            Test the STORe command.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
            <param name="fileSize"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestPutFileCreateNew(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String,System.Int32)">
            <summary>
            Test the STORe command.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
            <param name="fileSize"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestPutFileCreateOrAppend(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String,System.Int32)">
            <summary>
            Test the STORe command.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
            <param name="fileSize"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestPutFileResume(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String,System.Int32)">
            <summary>
            Test the RESTart command.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
            <param name="fileSize"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestPutFileResumeCreate(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String,System.Int32)">
            <summary>
            Test the RESTart command.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
            <param name="fileSize"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestQuote(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String)">
            <summary>
            Test the QUOTe command.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
        </member>
        <member name="M:Starksoft.Tests.TestFtpClient.TestGetDirList(System.String,System.Int32,Starksoft.Net.Ftp.FtpSecurityProtocol,System.String,System.String,System.String)">
            <summary>
            Test directory listing command.
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="protocol"></param>
            <param name="user"></param>
            <param name="pwd"></param>
            <param name="server"></param>
        </member>
        <member name="T:Starksoft.Net.Ftp.TransferMode">
            <summary>
            The type of data transfer mode (e.g. Active or Passive).
            </summary>
            <remarks>
            The default setting is Passive data transfer mode.  This mode is widely used as a
            firewall friendly setting for the FTP clients operating behind a firewall.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferMode.Active">
            <summary>
            Active transfer mode.  In this mode the FTP server initiates a connection to the client when transfering data.
            </summary>
            <remarks>This transfer mode may not work when the FTP client is behind a firewall and is accessing a remote FTP server.</remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferMode.Passive">
            <summary>
            Passive transfer mode.  In this mode the FTP client initiates a connection to the server when transfering data.
            </summary>
            <remarks>
            This transfer mode is "firewall friendly" and generally allows an FTP client behind a firewall to access a remote FTP server.
            This mode is recommended for most data transfers.
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.HashingAlgorithm">
            <summary>
            Enumeration representing the type of integrity algorithm used to verify the integrity of the file after transfer and storage.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.HashingAlgorithm.None">
            <summary>
            No algorithm slected.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.HashingAlgorithm.Crc32">
            <summary>
            Cyclic redundancy check (CRC).  A CRC can be used in a similar way as a cryptogrphic hash to detect accidental 
            alteration of data during transmission or storage.  A CRC value does not provide a value for true file integrity value
            but rather can be used to detect transmission errors.  Use a cryptographic hashing function such as SHA-1 or higher
            for true cryptographic integrity.
            </summary>
            <remarks>
            It is often falsely assumed that when a message and its CRC are transmitted over an open channel, then when it arrives 
            if the CRC matches the message's calculated CRC then the message cannot have been altered in transit.  A CRC value 
            is produced from a cryptographic hashing algorithm but is rather just a simple computational check value.
            For this reason it is recommended to use a cryptographic hashing function such as SHA-1 or higher whenever possible.
            For new systems it is recommend to use the SHA-2 cryptographic hashing functions.
            </remarks>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Md5"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha1"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha256"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha512"/>
        </member>
        <member name="F:Starksoft.Net.Ftp.HashingAlgorithm.Md5">
            <summary>
            Message-Digest algorithm 5 (MD5).  Hashing function used to produce a 'unique' signature to detect 
            alternation of data during transmission or storage.
            </summary>
            <remarks>
            MD5 is a weak algorithm and has been show to produce collisions.  For this reason it is recommended to use SHA-1 or higher when possible.
            </remarks>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Crc32"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha1"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha256"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha512"/>
        </member>
        <member name="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha1">
            <summary>
            Secure Hash Algorithm (SHA-1).  Cryptographic hash functions designed by the National Security Agency (NSA) and published by the NIST as a U.S. Federal Information Processing Standard.
            </summary>
            <remarks>
            The SHA-1 hashing algorithm has been shown to be theoritically vunerable to a mathematical weakness therefore the SHA-2 functions are recommended on new projects.
            </remarks>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Md5"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Crc32"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha256"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha512"/>
        </member>
        <member name="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha256">
            <summary>
            Secure Hash Algorithm (SHA-2).  Cryptographic hash functions designed by the National Security Agency (NSA) and published by the NIST as a U.S. Federal Information Processing Standard.
            </summary>
            <remarks>
            The SHA-1 hashing algorithm has been shown to be theoritically vunerable to a mathematical weakness therefore the SHA-2 functions are recommended on new projects.
            </remarks>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Md5"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Crc32"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha1"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha512"/>
        </member>
        <member name="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha512">
            <summary>
            Secure Hash Algorithm (SHA-2).  Cryptographic hash functions designed by the National Security Agency (NSA) and published by the NIST as a U.S. Federal Information Processing Standard.
            </summary>
            <remarks>
            The SHA-1 hashing algorithm has been shown to be theoritically vunerable to a mathematical weakness therefore the SHA-2 functions are recommended on new projects.
            </remarks>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Md5"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Crc32"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha1"/>
            <seealso cref="F:Starksoft.Net.Ftp.HashingAlgorithm.Sha256"/>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpSecurityProtocol">
            <summary>
            Defines the possible versions of FtpSecurityProtocol.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.None">
            <summary>
            No security protocol specified.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Tls1Explicit">
            <summary>
            Specifies Transport Layer Security (TLS) version 1.0 is required to secure communciations.  The TLS protocol is defined in IETF RFC 2246 and supercedes the SSL 3.0 protocol.
            </summary>
            <remarks>
            The AUTH TLS command is sent to the FTP server to secure the connection.  TLS protocol is the latest version of the SSL protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Tls1OrSsl3Explicit">
            <summary>
            Specifies Transport Layer Security (TLS) version 1.0. or Secure Socket Layer (SSL) version 3.0 is acceptable to secure communications in explicit mode.
            </summary>
            <remarks>
            The AUTH SSL command is sent to the FTP server to secure the connection but the security protocol is negotiated between the server and client.  
            TLS protocol is the latest version of the SSL 3.0 protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Ssl3Explicit">
            <summary>
            Specifies Secure Socket Layer (SSL) version 3.0 is required to secure communications in explicit mode.  SSL 3.0 has been superseded by the TLS protocol
            and is provided for backward compatibility only
            </summary>
            <remarks>
            The AUTH SSL command is sent to the FTP server to secure the connection.  TLS protocol is the latest version of the SSL 3.0 protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            Some FTP server do not implement TLS or understand the command AUTH TLS.  In those situations you should specify the security
            protocol Ssl3, otherwise specify Tls1.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Ssl2Explicit">
            <summary>
            Specifies Secure Socket Layer (SSL) version 2.0 is required to secure communications in explicit mode.  SSL 2.0 has been superseded by the TLS protocol
            and is provided for backward compatibility only.  SSL 2.0 has several weaknesses and should only be used with legacy FTP server that require it.
            </summary>
            <remarks>
            The AUTH SSL command is sent to the FTP server to secure the connection.  TLS protocol is the latest version of the SSL 3.0 protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            Some FTP server do not implement TLS or understand the command AUTH TLS.  In those situations you should specify the security
            protocol Ssl3, otherwise specify Tls1.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Tls1Implicit">
            <summary>
            Specifies Transport Layer Security (TLS) version 1.0 is required to secure communciations in explicit mode.  The TLS protocol is defined in IETF RFC 2246 and supercedes the SSL 3.0 protocol.
            </summary>
            <remarks>
            The AUTH TLS command is sent to the FTP server to secure the connection.  TLS protocol is the latest version of the SSL protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Tls1OrSsl3Implicit">
            <summary>
            Specifies Transport Layer Security (TLS) version 1.0. or Secure Socket Layer (SSL) version 3.0 is acceptable to secure communications in implicit mode.
            </summary>
            <remarks>
            The AUTH SSL command is sent to the FTP server to secure the connection but the security protocol is negotiated between the server and client.  
            TLS protocol is the latest version of the SSL 3.0 protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Ssl3Implicit">
            <summary>
            Specifies Secure Socket Layer (SSL) version 3.0 is required to secure communications in implicit mode.  SSL 3.0 has been superseded by the TLS protocol
            and is provided for backward compatibility only
            </summary>
            <remarks>
            The AUTH SSL command is sent to the FTP server to secure the connection.  TLS protocol is the latest version of the SSL 3.0 protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            Some FTP server do not implement TLS or understand the command AUTH TLS.  In those situations you should specify the security
            protocol Ssl3, otherwise specify Tls1.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpSecurityProtocol.Ssl2Implicit">
            <summary>
            Specifies Secure Socket Layer (SSL) version 2.0 is required to secure communications in implicit mode.  SSL 2.0 has been superseded by the TLS protocol
            and is provided for backward compatibility only.  SSL 2.0 has several weaknesses and should only be used with legacy FTP server that require it.
            </summary>
            <remarks>
            The AUTH SSL command is sent to the FTP server to secure the connection.  TLS protocol is the latest version of the SSL 3.0 protcol and is the security protocol that should be used whenever possible.
            There are slight differences between SSL version 3.0 and TLS version 1.0, but the protocol remains substantially the same.
            Some FTP server do not implement TLS or understand the command AUTH TLS.  In those situations you should specify the security
            protocol Ssl3, otherwise specify Tls1.
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.NetworkVersion">
            <summary>
            IP network protocol options.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.NetworkVersion.IPv4">
            <summary>
            Internet Protocol version 4. 
            </summary>
            <remarks>
            IPv4 is the most widely deployed IP addressing protocol used for Internet communications.  A typical IP v4 address uses dot notation such as 192.168.10.4.  The IPv4 protocol has 
            limitations on addressing space as well as other issues and has been superceeded by the IPv6 protocol.  When choosing the IPv6 protocol for FTP communcations, the Starksoft
            FtpClient will use the standard port and passive commands PORT/PASV.  Unless required, choose IPv4 for your IP network protocol addressing.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.NetworkVersion.IPv6">
            <summary>
            Internet Protocol version 6.
            </summary>
            <remarks>
            IPv6 is the newest Internet protcol version and is gaining adoption.  A typical IP v6 address uses colon notation such as 2001:0db8:85a3:0042:0000:8a2e:0370:7334.  The IPv4 protocol has 
            limitations on addressing space as well as other issues and has been superceeded by the IPv6 protocol.  When choosing the IPv6 protocol for FTP communcations, the Starksoft
            FtpClient will use the extended port and extended passive commands EPRT/EPSV which support IPv6 addressing.  Not all FTP servers support these extended commands.
            Unless required, choose IPv4 for your IP network protocol addressing for highest compatability with existing FTP servers.
            </remarks>
        </member>
        <member name="T:Starksoft.Net.Ftp.TransferDirection">
            <summary>
            The data transfer directory.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferDirection.ToClient">
            <summary>
            Transfer data from server to client.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.TransferDirection.ToServer">
            <summary>
            Transfer data from client to server.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpResponseCode">
            <summary>
            Enumeration representing all the various response codes from a FTP server.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.None">
            <summary>
            No response was received from the server.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.CommandOkay">
            <summary>
            The command was executed sucessfully (200).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.SyntaxErrorCommandUnrecognized">
            <summary>
            A syntax error occurred because the command was not recognized (500).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.SyntaxErrorInParametersOrArguments">
            <summary>
            A syntax error occurred because the input parameters or arguments for the command are invalid (501).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.CommandNotImplementedSuperfluousAtThisSite">
            <summary>
            The command is considered superfluous and not implemented by the FTP server (202).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.CommandNotImplemented">
            <summary>
            The command is not implement by the FTP server (502).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.BadSequenceOfCommands">
            <summary>
            A bad sequence of commands was issued (503).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.CommandNotImplementedForThatParameter">
            <summary>
            The command does not support the supplied parameter (504).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RestartMarkerReply">
            <summary>
            Restart marker reply (110).  MARK yyyy = mmmm  Where yyyy is User-process data 
            stream marker, and mmmm server's equivalent marker (note the spaces between
            markers and "=").
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.SystemStatusOrHelpReply">
            <summary>
            System status or system help reply (211).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.DirectoryStatus">
            <summary>
            Directory status (212).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.FileStatus">
            <summary>
            File status (213).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.HelpMessage">
            <summary>
            Help message (214).  On how to use the server or the meaning of a particular
            non-standard command.  This reply is useful only to the human user.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.NameSystemType">
            <summary>
            Name system type where Name is an official system name from the list in the
            Assigned Numbers document (215).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ServiceReadyInxxxMinutes">
            <summary>
            Service ready in xxx minutes (120).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ServiceReadyForNewUser">
            <summary>
            Service is now ready for new user (220).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ServiceClosingControlConnection">
            <summary>
            Service is closing control connection (221).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ServiceNotAvailableClosingControlConnection">
            <summary>
            Service not available, closing control connection (421). This may be a reply to any 
            command if the service knows it must shut down.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.DataConnectionAlreadyOpenSoTransferStarting">
            <summary>
            Data connection already open; transfer starting (125).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.DataConnectionOpenSoNoTransferInProgress">
            <summary>
            Data connection open so no transfer in progress (225).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.CannotOpenDataConnection">
            <summary>
            cannot open data connection (425).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ClosingDataConnection">
            <summary>
            Requested file action successful (for example, file transfer or file abort) (226).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ConnectionClosedSoTransferAborted">
            <summary>
            Connection closed therefore the transfer was aborted (426).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.EnteringPassiveMode">
            <summary>
            Entering Passive Mode (h1,h2,h3,h4,p1,p2) (227).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.UserLoggedIn">
            <summary>
            User logged in, proceed (230).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.NotLoggedIn">
            <summary>
            User is not logged in.  Command not accepted (530).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.UserNameOkayButNeedPassword">
            <summary>
            The user name was accepted but the password must now be supplied (331).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.NeedAccountForLogin">
            <summary>
            An account is needed for login (332).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.NeedAccountForStoringFiles">
            <summary>
            An account is needed for storing file on the server (532).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.FileStatusOkaySoAboutToOpenDataConnection">
            <summary>
            File status okay; about to open data connection (150).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedFileActionOkayAndCompleted">
            <summary>
            Requested file action okay, completed (250).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.PathNameCreated">
            <summary>
            The pathname was created (257).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedFileActionPendingFurtherInformation">
            <summary>
            Requested file action pending further information (350).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedFileActionNotTaken">
            <summary>
            Requested file action not taken (450).  
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedActionNotTakenFileUnavailable">
            <summary>
            Requested file action not taken (550).  File unavailable (e.g., file busy).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedActionAbortedDueToLocalErrorInProcessing">
            <summary>
            Requested action aborted (451). Local error in processing.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedActionAbortedPageTypeUnknown">
            <summary>
            Requested action aborted (551). Page type unknown.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedActionNotTakenInsufficientStorage">
            <summary>
            Requested action not taken (452).  Insufficient storage space in system.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedFileActionAbortedExceededStorageAllocation">
            <summary>
            Requested file action aborted (552).  Exceeded storage allocation (for current directory or dataset).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.RequestedActionNotTakenFileNameNotAllowed">
            <summary>
            Requested action not taken (553).  File name not allowed.
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.AuthenticationCommandOkay">
            <summary>
            Secure authentication Okay (234).
            </summary>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.AuthenticationCommandOkaySecurityDataOptional">
            <summary>
            This reply indicates that the requested security mechanism
            is ok, and includes security data to be used by the client
            to construct the next command.  The square brackets are not
            to be included in the reply, but indicate that
            security data in the reply is optional.  (334)
            </summary>
            <remarks>
            Example:
                 334 [ADAT=base64data]
                 ADAT base64data
            
            See http://www.ietf.org/rfc/rfc2228.txt for more information.
            </remarks>
        </member>
        <member name="F:Starksoft.Net.Ftp.FtpResponseCode.ServiceIsUnavailable">
            <summary>
            SSL service is Unavailable (431).
            </summary>
        </member>
        <member name="T:Starksoft.Net.Http.TransferProgressEventArgs">
            <summary>
            Event arguments to facilitate the transfer progress event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.TransferProgressEventArgs.#ctor(System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
            <param name="bytesTransferred">The number of bytes transferred.</param>
            <param name="bytesPerSecond">The data transfer speed in bytes per second.</param>
            <param name="elapsedTime">The time that has elapsed since the data transfer started.</param>
        </member>
        <member name="P:Starksoft.Net.Http.TransferProgressEventArgs.BytesTransferred">
            <summary>
            The number of bytes transferred.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.TransferProgressEventArgs.BytesPerSecond">
            <summary>
            Gets the data transfer speed in bytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.TransferProgressEventArgs.KilobytesPerSecond">
            <summary>
            Gets the data transfer speed in kilobytes per second.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.TransferProgressEventArgs.ElapsedTime">
            <summary>
            Gets the time that has elapsed since the data transfer started.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Http.HttpParameterCollection">
            <summary>
            Http parameter collection.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpParameterCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpParameterCollection.IndexOf(Starksoft.Net.Http.HttpParameter)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire WebParameterCollection list.
            </summary>
            <param name="item">The WebParameter object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire if found; otherwise, -1.</returns>
        </member>
        <member name="M:Starksoft.Net.Http.HttpParameterCollection.Add(Starksoft.Net.Http.HttpParameter)">
            <summary>
            Adds an WebParameter to the end of the WebParameterCollection list.
            </summary>
            <param name="item">WebParameter object to add.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpParameterCollection.Clear">
            <summary>
            Remove all elements from the WebParameterCollection list.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.HttpParameterCollection.Count">
            <summary>
             Gets the number of elements actually contained in the WebParameterCollection list.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.HttpParameterCollection.Item(System.Int32)">
            <summary>
            Gets an WebParameter from the WebParameterCollection list based on index value.
            </summary>
            <param name="index">Numeric index of item to retrieve.</param>
            <returns>WebParameter object.</returns>
        </member>
        <member name="T:Starksoft.Net.Http.HttpDataCompressionException">
            <summary>
            This exception is thrown when the Http server is unable to enable or disable data compression.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpDataCompressionException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpDataCompressionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpDataCompressionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpDataCompressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpResponse">
            <summary>
            FTP response class containing the FTP raw text, response code, and other information.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponse.#ctor">
            <summary>
            Default constructor for FtpResponse.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponse.#ctor(System.String)">
            <summary>
            Constructor for FtpResponse.
            </summary>
            <param name="rawText">Raw text information sent from the FTP server.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponse.#ctor(Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Constructor for FtpResponse.
            </summary>
            <param name="response">FtpResponse object.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponse.RawText">
            <summary>
            Get raw server response text information.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponse.Text">
            <summary>
            Get the server response text.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponse.Code">
            <summary>
            Get a value indicating the FTP server response code.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Ftp.FtpResponseQueue">
            <summary>
            Thread safe FtpResponse queue object.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseQueue.Enqueue(Starksoft.Net.Ftp.FtpResponse)">
            <summary>
            Adds an Response object to the end of the FtpResponseQueue.
            </summary>
            <param name="item">An FtpResponse item.</param>
        </member>
        <member name="M:Starksoft.Net.Ftp.FtpResponseQueue.Dequeue">
            <summary>
            Removes and returns the FtpResponse object at the beginning of the FtpResponseQueue.
            </summary>
            <returns>FtpResponse object at the beginning of the FtpResponseQueue</returns>
        </member>
        <member name="P:Starksoft.Net.Ftp.FtpResponseQueue.Count">
            <summary>
            Gets the number of elements contained in the FtpResponseQueue.
            </summary>
        </member>
        <member name="T:Starksoft.Net.Http.HttpHeaderCollection">
            <summary>
            Http header collection.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpHeaderCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpHeaderCollection.IndexOf(Starksoft.Net.Http.HttpHeader)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire WebHeaderCollection list.
            </summary>
            <param name="item">The WebHeader object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire if found; otherwise, -1.</returns>
        </member>
        <member name="M:Starksoft.Net.Http.HttpHeaderCollection.Add(Starksoft.Net.Http.HttpHeader)">
            <summary>
            Adds an WebHeader to the end of the WebHeaderCollection list.
            </summary>
            <param name="item">WebHeader object to add.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpHeaderCollection.Clear">
            <summary>
            Remove all elements from the WebHeaderCollection list.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.HttpHeaderCollection.Count">
            <summary>
             Gets the number of elements actually contained in the WebHeaderCollection list.
            </summary>
        </member>
        <member name="P:Starksoft.Net.Http.HttpHeaderCollection.Item(System.Int32)">
            <summary>
            Gets an WebHeader from the WebHeaderCollection list based on index value.
            </summary>
            <param name="index">Numeric index of item to retrieve.</param>
            <returns>WebHeader object.</returns>
        </member>
        <member name="T:Starksoft.Net.Http.HttpAuthenticationException">
            <summary>
            This exception is thrown when an error occurs when there is a secure connection
            authentication failure.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpAuthenticationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Http.HttpAuthenticationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpAuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message text.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Starksoft.Net.Http.HttpAuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Stream context information.</param>
        </member>
        <member name="T:Starksoft.Net.Ftp.GetDirListAsyncCompletedEventArgs">
            <summary>
            Provides data for the GetDirListAsyncCompleted event.
            </summary>
        </member>
        <member name="M:Starksoft.Net.Ftp.GetDirListAsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,Starksoft.Net.Ftp.FtpItemCollection)">
            <summary>
             Initializes a new instance of the PutFileAsyncCompletedEventArgs class.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="directoryListing">A FtpItemCollection containing the directory listing.</param>
        </member>
        <member name="P:Starksoft.Net.Ftp.GetDirListAsyncCompletedEventArgs.DirectoryListingResult">
            <summary>
            Directory listing collection.
            </summary>
        </member>
    </members>
</doc>
